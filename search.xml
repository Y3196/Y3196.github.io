<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rabbitMQ</title>
      <link href="/2022/05/18/rabbitMQ/"/>
      <url>/2022/05/18/rabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMq简单的使用"><a href="#RabbitMq简单的使用" class="headerlink" title="RabbitMq简单的使用"></a>RabbitMq简单的使用</h1><blockquote><h2 id="什么是rabbitMq"><a href="#什么是rabbitMq" class="headerlink" title="什么是rabbitMq"></a>什么是rabbitMq</h2></blockquote><p> RabbitMQ是一个由<strong>erlang</strong>开发的<strong>AMQP</strong>（Advanced Message Queue 高级消息队列协议 ）的开源实现，能够<strong>实现异步消息处理</strong><br> RabbitMQ是一个<strong>消息代理</strong>：<strong>它接受和转发消息</strong>。<br>你可以把它想象成一个<strong>邮局</strong>：当你把你想要发布的邮件放在邮箱中时，你可以确定邮差先生最终将邮件发送给你的收件人。在这个比喻中，<strong>RabbitMQ是邮政信箱</strong>，<strong>邮局和邮递员</strong>。<br>RabbitMQ和邮局的主要区别在于它不处理纸张，而是接受，存储和转发二进制数据块</p><p>优点：异步消息处理<br>           <strong>1.业务解耦</strong>（<strong>下订单操作：扣减库存、生成订单、发红包、发短信</strong>），将下单操作主流程：扣减库存、生成订单然后通过MQ消息队列完成通知，发红包、发短信</p><p>​<strong>2.错峰流控</strong> （通知量 消息量 订单量大的情况实现MQ消息队列机制，淡季情况下访问量会少）</p><p>​<strong>3.灵活的路由</strong>（Flexible Routing）  在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，<strong>RabbitMQ 已经提供了一些内置的 Exchange 来实现</strong>。  针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己 Exchange。</p><p>​    RabbitMQ网站端口号：15672<br>​    程序里面实现的端口为：5672</p><blockquote><h2 id="RabbitMQ的核心组成部分"><a href="#RabbitMQ的核心组成部分" class="headerlink" title="RabbitMQ的核心组成部分"></a>RabbitMQ的核心组成部分</h2></blockquote><p><img src="https://img-blog.csdnimg.cn/20210905000302290.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Ya36KGA772e5aSa5aW9,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><blockquote><h2 id="springboot案例"><a href="#springboot案例" class="headerlink" title="springboot案例"></a>springboot案例</h2></blockquote><h4 id="Fanout-模式-以发送邮箱作为例子"><a href="#Fanout-模式-以发送邮箱作为例子" class="headerlink" title="**Fanout 模式 ** 以发送邮箱作为例子"></a>**Fanout 模式 ** <strong>以发送邮箱作为例子</strong></h4><p>广播模式：简单的讲，就是把<u>交换机（Exchange）里的消息发送给<strong>所有绑定该交换机</strong></u>的<strong>队列</strong>，<strong>忽略</strong></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq starter 依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置yml文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mq配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">你的ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">rabbitmq用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">rabbitmq密码</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="number">3000</span> <span class="comment">#重试间隔时间（单位毫秒）</span></span><br><span class="line"> <span class="comment"># 邮箱配置</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">邮箱用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">邮箱授权码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">587</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">      <span class="attr">smtp:</span></span><br><span class="line">      <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">socketFactory:</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br></pre></td></tr></table></figure></li><li><p>RabbitMQ配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.minzheng.blog.constant.MQPrefixConst.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rabbitmq配置类</span></span><br><span class="line"><span class="comment"> * 创建交换机、创建队列、创建绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yezhiqiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/07/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">emailQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(EMAIL_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建广播类型的交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">emailExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(EMAIL_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingEmailDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(emailExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交换机</span></span><br><span class="line"><span class="comment">     * directExchange：定向类型的交换机</span></span><br><span class="line"><span class="comment">     * fanoutExchange: 广播类型的交换机</span></span><br><span class="line"><span class="comment">     * headersExchange: 参数匹配类型的交换机</span></span><br><span class="line"><span class="comment">     * topicExchange: 通配符交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Bean(&quot;myExchange&quot;)</span></span><br><span class="line"><span class="comment">    public Exchange myExchange()&#123;</span></span><br><span class="line"><span class="comment">        return ExchangeBuilder.directExchange(&quot;my_exchange&quot;).build();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mq常量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mqprefix常量</span></span><br><span class="line"><span class="comment"> * mq常量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yezhiqiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/07/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQPrefixConst</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * email交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;email_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮件队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;email_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者：生产消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserAuthDao, UserAuth&gt; <span class="keyword">implements</span> <span class="title class_">UserAuthService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者生产消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 邮箱号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCode</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验账号是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (!checkEmail(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;请输入正确邮箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成六位随机验证码发送</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> getRandomCode();</span><br><span class="line">        <span class="comment">// 发送验证码</span></span><br><span class="line">        <span class="type">EmailDTO</span> <span class="variable">emailDTO</span> <span class="operator">=</span> EmailDTO.builder()</span><br><span class="line">                .email(username)</span><br><span class="line">                .subject(<span class="string">&quot;验证码&quot;</span>)</span><br><span class="line">                .content(<span class="string">&quot;您的验证码为 &quot;</span> + code + <span class="string">&quot; 有效期15分钟，请不要告诉他人哦！&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, <span class="string">&quot;*&quot;</span>, <span class="keyword">new</span> <span class="title class_">Message</span>(JSON.toJSONBytes(emailDTO), <span class="keyword">new</span> <span class="title class_">MessageProperties</span>()));</span><br><span class="line">        <span class="comment">// 将验证码存入redis，设置过期时间为15分钟</span></span><br><span class="line">        redisService.set(USER_CODE_KEY + username, code, CODE_EXPIRE_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者：从消息队列中拿消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.minzheng.blog.dto.EmailDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.minzheng.blog.constant.MQPrefixConst.EMAIL_QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知邮箱</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yezhqiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/06/13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = EMAIL_QUEUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="type">EmailDTO</span> <span class="variable">emailDTO</span> <span class="operator">=</span> JSON.parseObject(<span class="keyword">new</span> <span class="title class_">String</span>(data), EmailDTO.class);</span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setFrom(email);</span><br><span class="line">        message.setTo(emailDTO.getEmail());</span><br><span class="line">        message.setSubject(emailDTO.getSubject());</span><br><span class="line">        message.setText(emailDTO.getContent());</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller中使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户账号模块&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthService userAuthService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮箱验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Result&lt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AccessLimit(seconds = 60, maxCount = 1)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;发送邮箱验证码&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; sendCode(String username) &#123;</span><br><span class="line">        userAuthService.sendCode(username);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>狂神的例子：模拟用户购买商品下单的业务为例子</strong></p><ul><li><p>创建rabbitMQ配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springbootorderrabbitmqproducer.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfiguration</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 1： 声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout_order_ex&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2: 声明队列 duanxin.fanout.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">duanxinqueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;duanxin.fanout.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2: 声明队列 duanxin.fanout.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">smsqueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;sms.fanout.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2: 声明队列 duanxin.fanout.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">emailqueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;email.fanout.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3: 确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindduanxin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinqueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3: 确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindsms</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsqueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3: 确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindemail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailqueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springbootorderrabbitmqproducer.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;fanout_order_ex&quot;</span>;</span><br><span class="line">    <span class="comment">// 路由key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> xuke</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 模拟用户购买商品下单的业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 22:26 2021/3/5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [userId, productId, num]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeOrder</span><span class="params">(String userId,String productId,<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="comment">// 1: 根据商品id查询库存是否充足</span></span><br><span class="line">        <span class="comment">// 2: 保存订单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;保存订单成功：id是：&quot;</span> + orderId);</span><br><span class="line">        <span class="comment">// 3: 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springbootorderrabbitmqproducer.rabbitmq.springbootorderrabbitmqproducer;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.chen.springbootorderrabbitmqproducer.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootOrderRabbitmqProducerApplicationTests</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        orderService.makeOrder(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;100&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        orderService.makeOrderDirect(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;100&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectTTl</span><span class="params">()</span> &#123;</span><br><span class="line">        orderService.makeOrderDirectTtl(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;100&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//    @Test</span></span><br><span class="line"><span class="comment">//    public void testTopic() &#123;</span></span><br><span class="line"><span class="comment">//        orderService.makeOrderTopic(&quot;100&quot;,&quot;100&quot;,10);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者:接受消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.direct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectDuanxinConsumber</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 告诉你的接收服务器的消息，没有返回值</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reviceMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;duanxin--direct---&gt;接收到订单消息，订单id是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================================================</span></span><br><span class="line"><span class="keyword">package</span> com.chen.direct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;&quot;email.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectEmailConsumber</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reviceMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;email---direct--&gt;接收到订单消息，订单id是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==============================================================================================</span></span><br><span class="line"><span class="keyword">package</span> com.chen.direct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;&quot;sms.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectSmsConsumber</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reviceMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sms--direct---&gt;接收到订单消息，订单id是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Direct模式"><a href="#Direct模式" class="headerlink" title="Direct模式"></a>Direct模式</h4><p><strong>生产者和消费者</strong>，具有<strong>相同的交换机名称</strong>（Exchange）、<strong>交换机类型和相同的密匙</strong>（routingKey），那么<strong>消费者即可成功获取到消息。</strong><br>（PS：相对比只要交换机名称即可接收到消息的广播模式（fanout），direct模式在其基础上，多加了一层密码限制（routingKey）。）</p></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springbootorderrabbitmqproducer.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfiguration2</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 1： 声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct_order_ex&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2: 声明队列 duanxin.direct.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">duanxinqueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;duanxin.direct.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2: 声明队列 duanxin.direct.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">smsqueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;sms.direct.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2: 声明队列 duanxin.direct.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">emailqueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;email.direct.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3: 确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindduanxin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinqueue()).to(directExchange()).with(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3: 确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindsms</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsqueue()).to(directExchange()).with(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3: 确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindemail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailqueue()).to(directExchange()).with(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springbootorderrabbitmqproducer.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;fanout_order_ex&quot;</span>;</span><br><span class="line">    <span class="comment">// 路由key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 模拟用户购买商品下单的业务  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [userId, productId, num]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeOrderDirect</span><span class="params">(String userId,String productId,<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="comment">// 1: 根据商品id查询库存是否充足</span></span><br><span class="line">        <span class="comment">// 2: 保存订单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;保存订单成功：id是：&quot;</span> + orderId);</span><br><span class="line">        <span class="comment">// 3: 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;direct_order_ex&quot;</span>,<span class="string">&quot;email&quot;</span>,orderId);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;direct_order_ex&quot;</span>,<span class="string">&quot;sms&quot;</span>,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springbootorderrabbitmqproducer.rabbitmq.springbootorderrabbitmqproducer;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.chen.springbootorderrabbitmqproducer.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootOrderRabbitmqProducerApplicationTests</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        orderService.makeOrderDirect(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;100&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.direct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectDuanxinConsumber</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 告诉你的接收服务器的消息，没有返回值</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reviceMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;duanxin--direct---&gt;接收到订单消息，订单id是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.chen.direct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;&quot;email.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectEmailConsumber</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reviceMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;email---direct--&gt;接收到订单消息，订单id是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===================================================================================================</span></span><br><span class="line"><span class="keyword">package</span> com.chen.direct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;&quot;sms.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectSmsConsumber</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reviceMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sms--direct---&gt;接收到订单消息，订单id是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/03/22/%E7%88%AC%E8%99%AB/"/>
      <url>/2022/03/22/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="x3D-x3D-ElasticSerach-与-MySQL-区别-x3D-x3D"><a href="#x3D-x3D-ElasticSerach-与-MySQL-区别-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;ElasticSerach 与 MySQL 区别&#x3D;&#x3D;"></a>&#x3D;&#x3D;ElasticSerach 与 MySQL 区别&#x3D;&#x3D;</h1><blockquote><p>MySQL作为数据库的核心能力范围就是在线业务的事务处理和查询访问。 因此无论单体应用也好，微服务也好，都会以多连接请求的形式，将业务数据写入MySQL；作为专业的 <strong>Elasticsearch</strong>，往往在整个过程中，&#x3D;&#x3D;扮演着从MySQL复制数据、建立索引、提供搜索的角色&#x3D;&#x3D;。 这是最普遍存在的一种应用场景。</p></blockquote><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><blockquote><p>第一步 导包！！！</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第二步 创建 HtmlParseUtil 解析 爬取数据</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/// 使用前需要联网</span></span><br><span class="line"><span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=java&quot;</span>;</span><br><span class="line"><span class="comment">// 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line"><span class="comment">// 使用document可以使用在js对document的所有操作</span></span><br><span class="line"><span class="comment">// 2.获取元素（通过id）</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">j_goodsList</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line"><span class="comment">// 3.获取J_goodsList ul 每一个 li</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// 4.获取li下的 img、price、name</span></span><br><span class="line">        <span class="keyword">for</span> (Element li : lis) &#123;</span><br><span class="line">            <span class="comment">// 因为图片太多 如果用src进行加载图片的话 会没有结果，因为会先进行懒加载 将 src 改成  data-lazy-img</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> li.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);<span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;img : &quot;</span> + img);</span><br><span class="line">            System.out.println(<span class="string">&quot;name : &quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;price : &quot;</span> + price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**1.**其中 url 是<img src="/2022/03/22/%E7%88%AC%E8%99%AB/image-20220504162404839.png" alt="image-20220504162404839"></p><p>使用 JS 语句进行解析 <strong>J_goodsList</strong>   &#x3D;&#x3D;div 有 id 所以 通过 Id 进行查询  getElementById&#x3D;&#x3D;</p><p><img src="/2022/03/22/%E7%88%AC%E8%99%AB/image-20220504162739257.png" alt="image-20220504162739257"></p><p><strong>2.获取div下“每一本书” 即 每一条数据</strong>  &#x3D;&#x3D;li标签&#x3D;&#x3D;  因为没有id值 只能通过目标查询 &#x3D;&#x3D;.getElementsByTag&#x3D;&#x3D;</p><p><img src="/2022/03/22/%E7%88%AC%E8%99%AB/image-20220504163029480.png" alt="image-20220504163029480"></p><p><strong>3.</strong> 获取 **li 下的 价格 图片 名字 等数据 ** 通过 for 循环 &#x3D;&#x3D;遍历 li 标签！！！&#x3D;&#x3D; </p><p> <img src="/2022/03/22/%E7%88%AC%E8%99%AB/Users\yuxua\AppData\Roaming\Typora\typora-user-images\image-20220504163548695.png" alt="image-20220504163548695"></p><blockquote><p>因为 数据多的情况下，加载图片的时候，会先进行&#x3D;&#x3D;懒加载&#x3D;&#x3D; 获取图片时 不能直接 src</p></blockquote><p><strong>4.</strong> 故进行获取图片的时候 要先将 &#x3D;&#x3D;src 换成 data-lazy-img&#x3D;&#x3D;</p><p><strong>5.</strong> 封装为方法 与实体类结果使用  &#x3D;&#x3D;要将获取的li标签下的div的值 封装为 实体类&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Content</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8049497962627482693L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String img;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.</strong> 最后实现的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(parseJD(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Content&gt; <span class="title function_">parseJD</span><span class="params">(String keywor  vbd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/// 使用前需要联网</span></span><br><span class="line"><span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=&quot;</span> + keyword;</span><br><span class="line"><span class="comment">// 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line"><span class="comment">// 使用document可以使用在js对document的所有操作</span></span><br><span class="line"><span class="comment">// 2.获取元素（通过id）</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">j_goodsList</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line"><span class="comment">//j_goodsList 如果这里为空   用下面这个方法</span></span><br><span class="line"><span class="comment">//Document document = Jsoup.connect(url).userAgent(&quot;Mozilla/5.0 (Windows NT 5.1; zh-CN) AppleWebKit/535.12 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/535.12&quot;).timeout(30000).get();</span></span><br><span class="line"><span class="comment">// 3.获取J_goodsList ul 每一个 li</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// System.out.println(lis);</span></span><br><span class="line"><span class="comment">// 4.获取li下的 img、price、name</span></span><br><span class="line"><span class="comment">// list存储所有li下的内容</span></span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Content&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element li : lis) &#123;</span><br><span class="line"><span class="comment">// 由于网站图片使用懒加载，将src属性替换为data-lazy-img</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> li.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);<span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"><span class="comment">// 封装为对象</span></span><br><span class="line">            <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Content</span>(name,img,price);</span><br><span class="line"><span class="comment">// 添加到list中</span></span><br><span class="line">            contents.add(content);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// System.out.println(contents);</span></span><br><span class="line"><span class="comment">// 5.返回 list</span></span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reids与日志横切</title>
      <link href="/2021/12/23/reids%E4%B8%8E%E6%97%A5%E5%BF%97%E6%A8%AA%E5%88%87/"/>
      <url>/2021/12/23/reids%E4%B8%8E%E6%97%A5%E5%BF%97%E6%A8%AA%E5%88%87/</url>
      
        <content type="html"><![CDATA[<h1 id="日志横切"><a href="#日志横切" class="headerlink" title="日志横切"></a>日志横切</h1><h4 id="AOP日志横切"><a href="#AOP日志横切" class="headerlink" title="AOP日志横切"></a>AOP日志横切</h4><blockquote><p>自定义一个注解，默认值为空</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SysLog &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>日志横切 LogAspect</p></blockquote><ul><li><p>在类上加上 <strong>@Aspect</strong>  并注入容器里  <strong>@Component</strong></p></li><li><p>通过日志工厂获得日志，并且添加线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Long&gt; startTime = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li><li><p><strong>定义切入点</strong>，切入点（@Pointcut）：<strong>自定义注解所在的包以及类名</strong> 并用注解 @annotation</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 定义切入点，切入点为com.aaa.common.annotation.SysLog下的所有函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Pointcut(&quot;@annotation(com.aaa.annotation.SysLog)&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">webLog</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>前置通知</strong>  在连接点之前执行的通知</p><ul><li><p><strong>环绕之后</strong> 在环绕后的方法名加上 切入点注解 <strong>@Before(“webLog()”)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;webLog()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">      startTime.set(System.currentTimeMillis());  <span class="comment">// 这个东西注了 进不去</span></span><br><span class="line">      <span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">      System.out.println(<span class="string">&quot;接收到请求，记录请求内容-------------------------&quot;</span>);</span><br><span class="line">      <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">      <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 获得Session</span></span><br><span class="line">      <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> (HttpSession) attributes.resolveReference(RequestAttributes.REFERENCE_SESSION);</span><br><span class="line">      <span class="comment">// 记录下请求内容</span></span><br><span class="line">      logger.info(<span class="string">&quot;classMethod:======&gt;&quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">      logger.info(<span class="string">&quot;method:======&gt;&quot;</span> + request.getMethod());  <span class="comment">// 获得请求登录的方式</span></span><br><span class="line">      <span class="comment">//获取传入目标方法的参数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>(session != <span class="literal">null</span>)&#123;</span><br><span class="line">          logger.info(<span class="string">&quot;session id :======&gt;&quot;</span> + session.getId());  <span class="comment">// 获得session的id</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 获取方法的关键信息，类，包</span></span><br><span class="line">      <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">      <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();  <span class="comment">// 获取方法上的注解</span></span><br><span class="line">      <span class="type">SysLog</span> <span class="variable">mylog</span> <span class="operator">=</span> method.getAnnotation(com.aaa.annotation.SysLog.class);</span><br><span class="line">      <span class="comment">// 获取  LonginController 上的注解</span></span><br><span class="line">      <span class="keyword">if</span>(mylog != <span class="literal">null</span>)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;获取注解上的描述&quot;</span>);</span><br><span class="line">          <span class="comment">//注解上的描述</span></span><br><span class="line">          logger.info(<span class="string">&quot;mylog:======&gt;&quot;</span> + mylog.value());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>环绕之前，<strong>注意每个环绕方法都要加上 切入点注解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前，执行&quot;</span>+name+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后，执行&quot;</span>+name+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;exception message :======&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回通知：在目标方法成功执行之后调用通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回通知：在目标方法成功执行之后调用通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(Object ret)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法成功执行之后的通知-------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断成功返回true 跳转的页面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">retString</span> <span class="operator">=</span> JSONObject.toJSONString(ret);</span><br><span class="line">        retString = retString.length() &gt; <span class="number">2000</span> ? retString.substring(<span class="number">2000</span>) : retString;</span><br><span class="line">        logger.info(<span class="string">&quot;ret:======&gt;&quot;</span> + retString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户登录的时间</span></span><br><span class="line">        logger.info(<span class="string">&quot;useTime:======&gt;&quot;</span> + (System.currentTimeMillis() - startTime.get()) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="AOP日志横切的使用"><a href="#AOP日志横切的使用" class="headerlink" title="AOP日志横切的使用"></a>AOP日志横切的使用</h5><blockquote><p>在需要输出日志的Controller类里进行添加 <strong>自定义注解</strong></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 查询医生</span><br><span class="line">   * */</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;doctorList&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@SysLog(&quot;查询医生&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;)</span>  <span class="comment">// 需要日志输入的接口</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">doctorList</span><span class="params">(Doctor doctor, Integer page, Integer limit)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;查询医生---------------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">      List&lt;Doctor&gt; listAll = doctorService.doctorList(doctor);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Page</span>().page(listAll,limit,page);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="AOP整合RedisLock"><a href="#AOP整合RedisLock" class="headerlink" title="AOP整合RedisLock"></a>AOP整合RedisLock</h4><blockquote><p>1.定义自定义注解</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoRepeatSubmit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求锁定时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lockTime</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.定义切入点</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;@annotation(noRepeatSubmit)&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">(NoRepeatSubmit noRepeatSubmit)</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接进行环绕</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Around(&quot;pointCut(noRepeatSubmit)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp, NoRepeatSubmit noRepeatSubmit)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lockSeconds</span> <span class="operator">=</span> noRepeatSubmit.lockTime(); <span class="comment">// 进行设置锁的时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Assert 判断传进来的参数值是否不为空值，如果为空就抛出异常throw new IllegalArgumentException(msg)</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestUtils.getRequest();</span><br><span class="line">        Assert.notNull(request, <span class="string">&quot;request can not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>); <span class="comment">// 获取用户的登录</span></span><br><span class="line">        String[] tokens = bearerToken.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokens[<span class="number">1</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletPath(); <span class="comment">// 请求获取地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> getKey(token, path);</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> getClientId(); <span class="comment">// 请求获取客户端Id</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> redisLock.tryLock(key, clientId, lockSeconds); <span class="comment">// 进行加锁</span></span><br><span class="line">        log.info(<span class="string">&quot;tryLock key = [&#123;&#125;], clientId = [&#123;&#125;]&quot;</span>, key, clientId); <span class="comment">// 打印日志</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;tryLock success, key = [&#123;&#125;], clientId = [&#123;&#125;]&quot;</span>, key, clientId);</span><br><span class="line">            <span class="comment">// 获取锁成功</span></span><br><span class="line">            Object result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行进程</span></span><br><span class="line">                result = pjp.proceed();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 解锁</span></span><br><span class="line">                redisLock.releaseLock(key, clientId);</span><br><span class="line">                log.info(<span class="string">&quot;releaseLock success, key = [&#123;&#125;], clientId = [&#123;&#125;]&quot;</span>, key, clientId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，认为是重复提交的请求</span></span><br><span class="line">            log.info(<span class="string">&quot;tryLock fail, key = [&#123;&#125;]&quot;</span>, key);</span><br><span class="line">            <span class="keyword">return</span>  ApiResult.fail(<span class="string">&quot;重复请求，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">getKey</span><span class="params">(String token, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token + path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getClientId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="整合RedisLock的应用"><a href="#整合RedisLock的应用" class="headerlink" title="整合RedisLock的应用"></a>整合RedisLock的应用</h5><blockquote><p>日志整合redisLock应用，跟AOP日志横切应用一样，在需要的Controller类里<strong>添加自定义注解</strong></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AppLog(value = &quot;开始签到&quot;, type = 1)</span></span><br><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sign/integral&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;开始签到&quot;,notes = &quot;开始签到&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Object&gt; <span class="title function_">signIntegral</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ShopUser</span> <span class="variable">shopUser</span> <span class="operator">=</span> LocalUser.getUser();</span><br><span class="line">    <span class="type">int</span> <span class="variable">integral</span> <span class="operator">=</span> userSignService.sign(shopUser);;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;integral&quot;</span>,integral);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok(map,<span class="string">&quot;签到获得&quot;</span> + integral + <span class="string">&quot;积分&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h4 id="RedisUtils-可以参考比赛中的代码"><a href="#RedisUtils-可以参考比赛中的代码" class="headerlink" title="RedisUtils (可以参考比赛中的代码)"></a>RedisUtils (可以参考比赛中的代码)</h4><h5 id="1-常用数据类型"><a href="#1-常用数据类型" class="headerlink" title="1.常用数据类型"></a>1.常用数据类型</h5><table><thead><tr><th>String类型（opsForValue()）</th><th align="left">Hash类型（opsForHash()）</th><th>List类型（opsForList()）</th><th>Set类型（opsForSet()）</th></tr></thead><tbody><tr><td>expire(key, time, TimeUnit.SECONDS);      指定缓存失效时间</td><td align="left">opsForHash().get(key, item)<br>获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null。</td><td>opsForList().range(key, start, end);<br>获取list缓存的内容</td><td>opsForSet().members(key)<br>获取集合中的所有元素；</td></tr><tr><td>getExpire(key, TimeUnit.SECONDS);   根据key 获取过期时间</td><td align="left">opsForHash().entries(key)   获取变量中的键值对</td><td>opsForList().size(key)<br>获取list缓存长度</td><td>opsForSet().isMember(key, value)<br>根据value从一个set中查询,是否存在</td></tr><tr><td>opsForValue().get(key)                           普通缓存获取</td><td align="left">opsForHash().putAll(key, map); <br>以map集合的形式添加键值对</td><td>opsForList().index(key, index)<br>通过索引获取list的值</td><td>opsForSet().add(key, values)<br>将数据放入Set缓存</td></tr><tr><td>delete(key[0]) <br>delete(CollectionUtils.arrayToList(key))      删除缓存</td><td align="left">opsForHash().put(key, item, value)<br> 向一张hash表中放入数据,<strong>如果不存在将创建</strong></td><td>opsForList().rightPush(key, value);<br>按照先进先出的顺序来添加(value可以是多个值，或者是Collection var2)；</td><td>.opsForSet().remove(key, values);<br>移除值为value的</td></tr><tr><td>opsForValue().multiGet(Collections.singleton(keys))<br>批量获取值</td><td align="left">opsForHash().delete(key, item); <br>删除一个或者多个hash表字段</td><td>opsForList().rightPushAll(key, value);<br>按照先进先出的顺序来添加(value可以是多个值，或者是Collection var2)；</td><td>opsForSet().size(key)<br>移除值为value的</td></tr><tr><td>opsForValue().set(key, value)  <br> 设置当前的key以及value值</td><td align="left">opsForHash().hasKey(key, item); <br>查看hash表中指定字段是否存在</td><td>opsForList().set(key, index, value);<br>根据索引修改list中的某条数据</td><td></td></tr><tr><td>opsForValue().set(key, value, time, TimeUnit.SECONDS);<br>      设置当前的key以及value值并且设置过期时间</td><td align="left">opsForHash().increment(key, item, by);<br>hash递增 如果不存在,就会创建一个 并把新增后的值返回</td><td>opsForList().remove(key, count, value);<br>移除N个值为value</td><td></td></tr><tr><td>hasKey(key);     查看hash表中指定字段是否存在</td><td align="left">opsForHash().increment(key, item, -by);    递减</td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.Cursor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisConnectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ScanOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.online-key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String onlineKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisUtils</span><span class="params">(RedisTemplate&lt;Object, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            var5.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">key</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    判断是否有key所对应的值，有则返回true，没有则返回false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getY</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.redisTemplate.hasKey(key) ? <span class="built_in">this</span>.redisTemplate.opsForValue().get(key).toString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量获取值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">multiGet</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="built_in">this</span>.redisTemplate.opsForValue().multiGet(Collections.singleton(keys));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *设置变量值的过期时间。 timeout 过期时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.redisTemplate.opsForValue().set(key, value, time, timeUnit);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            var5.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// =============================== Set ====================================</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            var5.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            var4.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-遍历数据库键的scan"><a href="#2-遍历数据库键的scan" class="headerlink" title="2.遍历数据库键的scan"></a>2.遍历数据库键的scan</h5><blockquote><p>redisTemplate默认没有提供遍历数据库键的scan，只提供了sscan和hscan，我们自己实现这个scan 进行数据的迭代遍历</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *redisTemplate默认没有提供遍历数据库键的scan，只提供了sscan和hscan，我们自己实现这个scan</span></span><br><span class="line"><span class="comment">  * scan命令的时间复杂度虽然也是O(N)，但它是分次进行的，不会阻塞线程。进行数据的迭代遍历</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">scan</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">      <span class="type">ScanOptions</span> <span class="variable">options</span> <span class="operator">=</span> ScanOptions.scanOptions().match(pattern).build();</span><br><span class="line">      <span class="type">RedisConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="built_in">this</span>.redisTemplate.getConnectionFactory();</span><br><span class="line">      <span class="type">RedisConnection</span> <span class="variable">rc</span> <span class="operator">=</span> ((RedisConnectionFactory)Objects.requireNonNull(factory)).getConnection();</span><br><span class="line">      Cursor&lt;<span class="type">byte</span>[]&gt; cursor = rc.scan(options);</span><br><span class="line">      <span class="type">ArrayList</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(cursor.hasNext()) &#123;</span><br><span class="line">          result.add(<span class="keyword">new</span> <span class="title class_">String</span>((<span class="type">byte</span>[])cursor.next()));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          RedisConnectionUtils.releaseConnection(rc, factory);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">          var8.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在service层中调用这个方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部数据，不分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uName /</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> /</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OnlineUser&gt; <span class="title function_">getAll</span><span class="params">(String uName)</span> &#123;</span><br><span class="line">        List&lt;String&gt; keys = <span class="literal">null</span>;</span><br><span class="line">        keys = redisUtils.scan(ShopConstants.YSHOP_APP_LOGIN_USER + uName + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Collections.reverse(keys);</span><br><span class="line">        List&lt;OnlineUser&gt; onlineUsers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">OnlineUser</span> <span class="variable">onlineUser</span> <span class="operator">=</span> (OnlineUser) redisUtils.get(key);</span><br><span class="line">            onlineUsers.add(onlineUser);</span><br><span class="line">        &#125;</span><br><span class="line">        onlineUsers.sort((o1, o2) -&gt; o2.getLoginTime().compareTo(o1.getLoginTime()));</span><br><span class="line">        <span class="keyword">return</span> onlineUsers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-redis-查询关键字，模糊匹配的key"><a href="#3-redis-查询关键字，模糊匹配的key" class="headerlink" title="3.redis 查询关键字，模糊匹配的key"></a>3.redis 查询关键字，模糊匹配的key</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据查询关键字分页获取key集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> patternKey 查询关键字，模糊匹配的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 匹配到的keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findKeysForPage</span><span class="params">(String patternKey, <span class="type">int</span> page, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">ScanOptions</span> <span class="variable">options</span> <span class="operator">=</span> ScanOptions.scanOptions().match(patternKey).build();</span><br><span class="line">        <span class="type">RedisConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="built_in">this</span>.redisTemplate.getConnectionFactory();</span><br><span class="line">        <span class="type">RedisConnection</span> <span class="variable">rc</span> <span class="operator">=</span> ((RedisConnectionFactory)Objects.requireNonNull(factory)).getConnection();</span><br><span class="line">        Cursor&lt;<span class="type">byte</span>[]&gt; cursor = rc.scan(options);</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(size);</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmpIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromIndex</span> <span class="operator">=</span> page * size;</span><br><span class="line">        <span class="type">int</span> <span class="variable">toIndex</span> <span class="operator">=</span> page * size + size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cursor.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmpIndex &gt;= fromIndex &amp;&amp; tmpIndex &lt; toIndex) &#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> <span class="title class_">String</span>((<span class="type">byte</span>[])cursor.next()));</span><br><span class="line">                ++tmpIndex;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmpIndex &gt;= toIndex) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ++tmpIndex;</span><br><span class="line">                cursor.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(rc, factory);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var13) &#123;</span><br><span class="line">            var13.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="RedisLock分布式锁"><a href="#RedisLock分布式锁" class="headerlink" title="RedisLock分布式锁"></a>RedisLock分布式锁</h4><blockquote><p>redis实现分布式锁  注意事项：需要在这个类上 加上  @Service</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210505213026273.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.api.R;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.SetParams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 分布式锁实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">RELEASE_SUCCESS</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_LOCK_SCRIPT=<span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clinetId  客服端ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds   加锁时间 单位秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  setParams.nx().px( seconds )   仅当密钥尚不存在时才设置该密钥 . 设置指定的过期时间（以毫秒为单位）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String lockKey,String clinetId,<span class="type">long</span> seconds)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;)redisConnection-&gt;&#123;</span><br><span class="line">            <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">            <span class="type">SetParams</span> <span class="variable">setParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetParams</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set( lockKey, clinetId, setParams.nx().px( seconds ) );</span><br><span class="line">            <span class="keyword">if</span> (LOCK_SUCCESS.equals(result))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * singletonList 单例模式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">releaseLock</span><span class="params">(String lockKey,String clinetId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;)redisConnection-&gt;&#123;</span><br><span class="line">            <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval( RELEASE_LOCK_SCRIPT, Collections.singletonList( lockKey ), Collections.singletonList( clinetId ) );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (RELEASE_SUCCESS.equals(result))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis缓存穿透"><a href="#Redis缓存穿透" class="headerlink" title="Redis缓存穿透"></a>Redis缓存穿透</h4><h5 id="1-什么是缓存穿透"><a href="#1-什么是缓存穿透" class="headerlink" title="1.什么是缓存穿透"></a>1.什么是缓存穿透</h5><p>就是用户想要查询一个数据，在 <strong>redis 中查询不到</strong>，$\textcolor{red}{即没有在缓存中命中并不写入缓存}$，那么就会$\textcolor{red}{直接}$去<strong>持久化</strong>的 <strong>mysql 中进行查询</strong>，发现也没有这个数据，<strong>这将导致这个不存在的数据每次请求都要到数据库里查询</strong>。当用户巨多的时候，查询缓存都没有查询到，那么这些全部都去查询持久化的 mysql 数据库，压力全部打到 mysql 上面，这就是缓存穿透</p><h5 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h5><ul><li><p>使用布隆过滤器</p><ul><li>布隆过滤器是一种数据结构，对<strong>所有可能查询到的参数</strong>都是$\textcolor{red}{以hash的方式存储}$，会先在<strong>控制层进行校验</strong>，不符合的话，则丢弃，这就避免了对底层存储系统的压力</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/78a8cc5e44614629c69953722d840534.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>缓存空的对象</p><ul><li>缓存空对象，就是当我们在<strong>持久化的数据库中</strong>没有<strong>查询到我们期望的数据时</strong>，那么就返回一个$\textcolor{red}{空对象}$，并且将这个空对象缓存起来，再对其$\textcolor{red}{设置一个过期时间}$</li></ul></li></ul><h4 id="springboot整合redis-springCaache作为缓存"><a href="#springboot整合redis-springCaache作为缓存" class="headerlink" title="springboot整合redis+springCaache作为缓存"></a>springboot整合redis+springCaache作为缓存</h4><ul><li><p><strong>maven包</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用spring cache --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- redis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 为了解决 ClassNotFoundException: org.apache.commons.pool2.impl.GenericObjectPoolConfig --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><h5 id="application-yml文件的配置"><a href="#application-yml文件的配置" class="headerlink" title="application.yml文件的配置"></a>application.yml文件的配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="string">spring.redis.database=0</span>  </span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="string">spring.redis.host=localhost</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span>  </span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="comment">#spring.redis.password=yourpwd</span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.max-active=8</span>  </span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间 </span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.max-wait=-1ms</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.max-idle=8</span>  </span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.min-idle=0</span>  </span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="string">spring.redis.timeout=5000ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置缓存相关</span></span><br><span class="line"><span class="string">cache.default.expire-time=200</span></span><br><span class="line"><span class="string">cache.user.expire-time=180</span></span><br><span class="line"><span class="string">cache.user.name=test</span></span><br></pre></td></tr></table></figure></li><li><p><strong>自定义缓存读写机制</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.CacheErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(RedisConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * springboot使用redis改变序列化方式 配置序列化</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        FastJsonRedisSerializer&lt;Object&gt; fastJsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        configuration = configuration.serializeValuesWith(SerializationPair.fromSerializer(fastJsonRedisSerializer)).entryTtl(Duration.ofHours(<span class="number">2L</span>));  <span class="comment">// 设置缓存管理器管理的缓存的默认过期时间</span></span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置redis模板文件  配置 RedisTemplate 序列化策略，与缓存无关</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        FastJsonRedisSerializer&lt;Object&gt; fastJsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">// redis value 序列化方式使用jackson</span></span><br><span class="line">        template.setValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">        <span class="comment">// redis hash value 序列化方式使用jackson</span></span><br><span class="line">        template.setHashValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 开启之后，就完全禁用AutoType即@type了，这样就能防御住Fastjson反序列化漏洞了</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// redis key 序列化方式使用stringSerial</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// redis hash key 序列化方式使用stringSerial</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * redis中密钥</span></span><br><span class="line"><span class="comment">    *Redis 是一种键值（key-value）型的缓存型数据库，它将数据全部以键值对的形式存储在内存中，并且 key 与 value 一一对应。  *这里的 key 被形象的称之为密钥，Redis 提供了诸多操作这把“密钥”的命令，从而实现了对存储数据的管理。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyGenerator <span class="title function_">keyGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (target, method, params) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; container = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">3</span>);</span><br><span class="line">            Class&lt;?&gt; targetClassClass = target.getClass();</span><br><span class="line">            container.put(<span class="string">&quot;class&quot;</span>, targetClassClass.toGenericString());</span><br><span class="line">            container.put(<span class="string">&quot;methodName&quot;</span>, method.getName());</span><br><span class="line">            container.put(<span class="string">&quot;package&quot;</span>, targetClassClass.getPackage());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; ++i) &#123;</span><br><span class="line">                container.put(String.valueOf(i), params[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(container);</span><br><span class="line">            <span class="keyword">return</span> DigestUtils.sha256Hex(jsonString);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis数据操作异常处理 这里的处理：在日志中打印出错误信息，但是放行</span></span><br><span class="line"><span class="comment">     * 保证redis服务器出现连接等问题的时候不影响程序的正常运行，使得能够出问题时不用缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheErrorHandler <span class="title function_">errorHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;初始化 -&gt; [&#123;&#125;]&quot;</span>, <span class="string">&quot;Redis CacheErrorHandler&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheErrorHandler</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheGetError</span><span class="params">(RuntimeException e, Cache cache, Object key)</span> &#123;</span><br><span class="line">                RedisConfig.log.error(<span class="string">&quot;Redis occur handleCacheGetError：key -&gt; [&#123;&#125;]&quot;</span>, key, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCachePutError</span><span class="params">(RuntimeException e, Cache cache, Object key, Object value)</span> &#123;</span><br><span class="line">                RedisConfig.log.error(<span class="string">&quot;Redis occur handleCachePutError：key -&gt; [&#123;&#125;]；value -&gt; [&#123;&#125;]&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;key, value, e&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheEvictError</span><span class="params">(RuntimeException e, Cache cache, Object key)</span> &#123;</span><br><span class="line">                RedisConfig.log.error(<span class="string">&quot;Redis occur handleCacheEvictError：key -&gt; [&#123;&#125;]&quot;</span>, key, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheClearError</span><span class="params">(RuntimeException e, Cache cache)</span> &#123;</span><br><span class="line">                RedisConfig.log.error(<span class="string">&quot;Redis occur handleCacheClearError：&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类加上 <strong>@EnableCaching</strong> 注解</p></li></ul><p><img src="/2021/12/23/reids%E4%B8%8E%E6%97%A5%E5%BF%97%E6%A8%AA%E5%88%87/image-20220523205907367.png" alt="image-20220523205907367"></p><ul><li><p><strong>常用缓存注解简述</strong></p><ul><li><p><strong>@Cacheable</strong> $\textcolor{red}{将方法的结果缓存}$，必须要指定一个 <strong>cacheName（缓存空间）</strong></p><ul><li><p><strong>作用于方法上</strong>，$\textcolor{red}{用于对于方法返回结果进行缓存}$，如果<strong>已经存在该缓存</strong>，则<strong>直接从缓存中获取</strong>，缓存的key可以从入参中指定，缓存的 value 为方法返回值。</p><p><img src="/2021/12/23/reids%E4%B8%8E%E6%97%A5%E5%BF%97%E6%A8%AA%E5%88%87/image-20220523210746467.png" alt="image-20220523210746467"></p></li></ul></li><li><p>@CachePut 这个注解和 <strong><code>@Cacheable</code></strong> 有点类似，<strong>都会将结果缓存</strong>，但是<strong>标记 <code>@CachePut</code> 的方法每次都会执行，目的在于更新缓存</strong></p><p><img src="/2021/12/23/reids%E4%B8%8E%E6%97%A5%E5%BF%97%E6%A8%AA%E5%88%87/image-20220523210926166.png" alt="image-20220523210926166"></p><p>需要注意的是，$\textcolor{red}{不要在一个方法上同时使用@Cacheable 和 @CachePut}$</p></li><li><p><strong>@CacheEvict 用于移除缓存</strong> </p><ul><li><p>声明 **<code>allEntries=true</code>**移除该CacheName下所有缓存</p></li><li><p>声明**<code>beforeInvocation=true</code>** 在方法执行之前清除缓存，无论方法执行是否成功</p><p><img src="/2021/12/23/reids%E4%B8%8E%E6%97%A5%E5%BF%97%E6%A8%AA%E5%88%87/image-20220523210947738.png" alt="image-20220523210947738"></p></li></ul></li></ul></li><li><p><strong>上面注解中的常用配置参数：</strong></p><ul><li><strong>value：</strong> 缓存管理器中配置的缓存的名称，这里可以理解为一个组的概念，缓存管理器中可以有多套缓存配置，每套都有一个名称，类似于组名，这个可以配置这个值，选择使用哪个缓存的名称，配置后就会应用那个缓存名称对应的配置。</li><li><strong>key：</strong> $\textcolor{red}{缓存的 key，可以为空}$，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合<strong>（ KeyGenerator进行组合）</strong></li><li><strong>condition：</strong> 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存。</li><li><strong>unless：</strong> 不缓存的条件，和 condition 一样，也是 SpEL 编写，返回 true 或者 false，为 true 时则不进行缓存。</li></ul></li><li><p>总结 </p><ul><li><p>$\textcolor{red}{@Cacheable}$注解<strong>适用于查询</strong>，$\textcolor{red}{@CachePut}$<strong>适用于修改和新增</strong>，$\textcolor{red}{@CacheEvict}$则<strong>适用于删除</strong>。</p></li><li><p>查询：如果<strong>缓存中由则直接返回</strong>，如果<strong>无则从数据源中拿到，放入缓存中</strong>。</p><p>新增和修改：<strong>如果缓存中没有则新增，如果有则修改</strong>。</p><p>删除：如果由则删除。</p></li></ul></li></ul><h1 id="springCache整合Redis-案例实现"><a href="#springCache整合Redis-案例实现" class="headerlink" title="springCache整合Redis 案例实现"></a>springCache整合Redis 案例实现</h1><p>可以通过</p><p><a href="https://www.cnblogs.com/alinainai/p/11422673.html">SpringCache整合Redis - 小白一只726 - 博客园 (cnblogs.com)</a></p><p>进行知道流程！！！！！！！！</p><h1 id="自定义配置redis类"><a href="#自定义配置redis类" class="headerlink" title="自定义配置redis类"></a>自定义配置redis类</h1><blockquote><h2 id="redis常量"><a href="#redis常量" class="headerlink" title="redis常量"></a>redis常量</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis常量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPrefixConst</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">CODE_EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">15</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_CODE_KEY</span> <span class="operator">=</span> <span class="string">&quot;code:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博客浏览量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLOG_VIEWS_COUNT</span> <span class="operator">=</span> <span class="string">&quot;blog_views_count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章浏览量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ARTICLE_VIEWS_COUNT</span> <span class="operator">=</span> <span class="string">&quot;article_views_count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章点赞量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ARTICLE_LIKE_COUNT</span> <span class="operator">=</span> <span class="string">&quot;article_like_count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户点赞文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ARTICLE_USER_LIKE</span> <span class="operator">=</span> <span class="string">&quot;article_user_like:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说说点赞量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TALK_LIKE_COUNT</span> <span class="operator">=</span> <span class="string">&quot;talk_like_count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户点赞说说</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TALK_USER_LIKE</span> <span class="operator">=</span> <span class="string">&quot;talk_user_like:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论点赞量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COMMENT_LIKE_COUNT</span> <span class="operator">=</span> <span class="string">&quot;comment_like_count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户点赞评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COMMENT_USER_LIKE</span> <span class="operator">=</span> <span class="string">&quot;comment_user_like:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网站配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WEBSITE_CONFIG</span> <span class="operator">=</span> <span class="string">&quot;website_config&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户地区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_AREA</span> <span class="operator">=</span> <span class="string">&quot;user_area&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访客地区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VISITOR_AREA</span> <span class="operator">=</span> <span class="string">&quot;visitor_area&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面封面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAGE_COVER</span> <span class="operator">=</span> <span class="string">&quot;page_cover&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关于我信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ABOUT</span> <span class="operator">=</span> <span class="string">&quot;about&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访客</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNIQUE_VISITOR</span> <span class="operator">=</span> <span class="string">&quot;unique_visitor&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="redis操作"><a href="#redis操作" class="headerlink" title="redis操作"></a>redis操作</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Distance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.GeoResults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys key值集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// Long del(List&lt;String&gt; keys);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//Long getExpire(String key);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//Boolean hasKey(String key);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta delta值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取自增1后的 值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incrExpire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta delta值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递减后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="comment">//  Long decr(String key, long delta);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回内部key的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   内部key的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time    过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// Boolean hSet(String key, String hashKey, Object value, long time);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   内部key的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// void hSet(String key, String hashKey, Object value);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回hashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  hashMap值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map hashMap值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, ?&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta   递增条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta   递增条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递减后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset添加分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Double&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Double <span class="title function_">zIncr</span><span class="params">(String key, Object value, Double score)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset减少分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Double&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// Double zDecr(String key, Object value, Double score);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset根据分数排名获取指定元素信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Map&lt;Object, Double&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Double&gt; <span class="title function_">zReverseRangeWithScore</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取zset指定元素分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Double&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Double <span class="title function_">zScore</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取zset所有分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Map&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Double&gt; <span class="title function_">zAllScore</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回添加的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// Long sAddExpire(String key, long time, Object... values);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除掉的数据量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// ======================================以下没用到的=====================================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查询的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 总量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向bitmap中新增值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b      状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">bitAdd</span><span class="params">(String key, <span class="type">int</span> offset, <span class="type">boolean</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从bitmap中获取偏移量的值</span></span><br><span class="line"><span class="comment">     * bitmap:快速检索关键字状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">bitGet</span><span class="params">(String key, <span class="type">int</span> offset)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bitmap的key值总和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 总和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">bitCount</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bitmap范围值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit  范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 开始偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long类型集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">bitField</span><span class="params">(String key, <span class="type">int</span> limit, <span class="type">int</span> offset)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有bitmap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 以二进制字节数组返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">byte</span>[] bitGetAll(String key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向hyperlog中添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Long&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hyperAdd</span><span class="params">(String key, Object... value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hyperlog元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Long&#125; 元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hyperGet</span><span class="params">(String... key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hyperlog数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hyperDel</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加坐标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x    x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y    y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 地点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">geoAdd</span><span class="params">(String key, Double x, Double y, String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市名称获取坐标集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place 地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 坐标集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Point&gt; <span class="title function_">geoGetPointList</span><span class="params">(String key, Object... place)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个城市之间的距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeOne 地点1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeTow 地点2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Distance <span class="title function_">geoCalculationDistance</span><span class="params">(String key, String placeOne, String placeTow)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取附该地点附近的其他地点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place    地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> distance 附近的范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit    查几条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sort     排序规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回附近的地点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; geoNearByPlace(String key, String place, Distance distance, <span class="type">long</span> limit, Sort.Direction sort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取地点的hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place 地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">geoGetHash</span><span class="params">(String key, String... place)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="理解bitmap算法"><a href="#理解bitmap算法" class="headerlink" title="理解bitmap算法"></a>理解bitmap算法</h2><h3 id="什么是bitmap算法-青丶空゛的博客-CSDN博客-bitmap"><a href="#什么是bitmap算法-青丶空゛的博客-CSDN博客-bitmap" class="headerlink" title="什么是bitmap算法_青丶空゛的博客-CSDN博客_bitmap"></a><a href="https://blog.csdn.net/qq_17308321/article/details/88884797">什么是bitmap算法_青丶空゛的博客-CSDN博客_bitmap</a></h3><blockquote><h2 id="redis实现类"><a href="#redis实现类" class="headerlink" title="redis实现类"></a>redis实现类</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.minzheng.blog.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Distance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.GeoResults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public Long del(List&lt;String&gt; keys) &#123;</span></span><br><span class="line"><span class="comment">        return redisTemplate.delete(keys);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public Long getExpire(String key) &#123;</span></span><br><span class="line"><span class="comment">        return redisTemplate.getExpire(key, TimeUnit.SECONDS);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public Boolean hasKey(String key) &#123;</span></span><br><span class="line"><span class="comment">        return redisTemplate.hasKey(key);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incrExpire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForValue().increment(key, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="literal">null</span> &amp;&amp; count == <span class="number">1</span>) &#123;</span><br><span class="line">            redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* @Override</span></span><br><span class="line"><span class="comment">    public Long decr(String key, long delta) &#123;</span></span><br><span class="line"><span class="comment">        return redisTemplate.opsForValue().increment(key, -delta);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* @Override</span></span><br><span class="line"><span class="comment">    public Boolean hSet(String key, String hashKey, Object value, long time) &#123;</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForHash().put(key, hashKey, value);</span></span><br><span class="line"><span class="comment">        return expire(key, time);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void hSet(String key, String hashKey, Object value) &#123;</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForHash().put(key, hashKey, value);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ==========================================================================================================</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, ?&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ==========================================以上是没用到的====================================================</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zIncr</span><span class="params">(String key, Object value, Double score)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* @Override</span></span><br><span class="line"><span class="comment">    public Double zDecr(String key, Object value, Double score) &#123;</span></span><br><span class="line"><span class="comment">        return redisTemplate.opsForZSet().incrementScore(key, value, -score);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Double&gt; <span class="title function_">zReverseRangeWithScore</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end)</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zScore</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Double&gt; <span class="title function_">zAllScore</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(redisTemplate.opsForZSet().rangeWithScores(key, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  @Override</span></span><br><span class="line"><span class="comment">    public Long sAddExpire(String key, long time, Object... values) &#123;</span></span><br><span class="line"><span class="comment">        Long count = redisTemplate.opsForSet().add(key, values);</span></span><br><span class="line"><span class="comment">        expire(key, time);</span></span><br><span class="line"><span class="comment">        return count;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ======================================以下没用到的=====================================================</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bitAdd</span><span class="params">(String key, <span class="type">int</span> offset, <span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setBit(key, offset, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bitGet</span><span class="params">(String key, <span class="type">int</span> offset)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().getBit(key, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redisTemplate.execute 执行算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">bitCount</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">bitField</span><span class="params">(String key, <span class="type">int</span> limit, <span class="type">int</span> offset)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;List&lt;Long&gt;&gt;) con -&gt;</span><br><span class="line">                con.bitField(key.getBytes(),</span><br><span class="line">                        BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(limit)).valueAt(offset)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] bitGetAll(String key) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;<span class="type">byte</span>[]&gt;) con -&gt; con.get(key.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HyperLogLog的主要作用是用来做基数统计。</span></span><br><span class="line"><span class="comment">     * 基数统计：一个集合中不重复元素的个数。例如集合 &#123;“A”,“B”,“C”,“D”,“E”,“B”,“D”&#125;，它有7个元素，但它的基数为5。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hyperAdd</span><span class="params">(String key, Object... value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().add(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hyperGet</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hyperDel</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHyperLogLog().delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redisTemplate.opsForGeo() 地图信息的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x    x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y    y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 地点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">geoAdd</span><span class="params">(String key, Double x, Double y, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo().add(key, <span class="keyword">new</span> <span class="title class_">Point</span>(x, y), name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Point&gt; <span class="title function_">geoGetPointList</span><span class="params">(String key, Object... place)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo().position(key, place);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Distance <span class="title function_">geoCalculationDistance</span><span class="params">(String key, String placeOne, String placeTow)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .distance(key, placeOne, placeTow, RedisGeoCommands.DistanceUnit.KILOMETERS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; geoNearByPlace(String key, String place, Distance distance, <span class="type">long</span> limit, Sort.Direction sort) &#123;</span><br><span class="line">        RedisGeoCommands.<span class="type">GeoRadiusCommandArgs</span> <span class="variable">args</span> <span class="operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().includeCoordinates();</span><br><span class="line">        <span class="comment">// 判断排序方式</span></span><br><span class="line">        <span class="keyword">if</span> (Sort.Direction.ASC == sort) &#123;</span><br><span class="line">            args.sortAscending();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            args.sortDescending();</span><br><span class="line">        &#125;</span><br><span class="line">        args.limit(limit);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .radius(key, place, distance, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">geoGetHash</span><span class="params">(String key, String... place)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .hash(key, place);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserAuthDao, UserAuth&gt; <span class="keyword">implements</span> <span class="title class_">UserAuthService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCode</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验账号是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (!checkEmail(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;请输入正确邮箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成六位随机验证码发送</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> getRandomCode();</span><br><span class="line">        <span class="comment">// 发送验证码</span></span><br><span class="line">        <span class="type">EmailDTO</span> <span class="variable">emailDTO</span> <span class="operator">=</span> EmailDTO.builder()</span><br><span class="line">                .email(username)</span><br><span class="line">                .subject(<span class="string">&quot;验证码&quot;</span>)</span><br><span class="line">                .content(<span class="string">&quot;您的验证码为 &quot;</span> + code + <span class="string">&quot; 有效期15分钟，请不要告诉他人哦！&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, <span class="string">&quot;*&quot;</span>, <span class="keyword">new</span> <span class="title class_">Message</span>(JSON.toJSONBytes(emailDTO), <span class="keyword">new</span> <span class="title class_">MessageProperties</span>()));</span><br><span class="line">        <span class="comment">// 将验证码存入redis，设置过期时间为15分钟</span></span><br><span class="line">        redisService.set(USER_CODE_KEY + username, code, CODE_EXPIRE_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2021/09/22/jwt/"/>
      <url>/2021/09/22/jwt/</url>
      
        <content type="html"><![CDATA[<h1 id="Jwt"><a href="#Jwt" class="headerlink" title="Jwt"></a>Jwt</h1><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>Json web token (JWT), 是为了在<strong>网络应用环境间传递声明</strong>而执行的$\textcolor{red}{一种基于JSON}$的开放标准（<a href="https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为$\textcolor{red}{紧凑且安全}$的，特别适用于<strong>分布式站点的单点登录</strong>（SSO）场景。JWT的声明一般被用来在$\textcolor{red}{身份提供者和服务提供者间传递}$被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token <strong>也可直接被用于认证，也可被加密</strong></p><p>$\textcolor{red}{}$</p><h4 id="JWT的认证流程图"><a href="#JWT的认证流程图" class="headerlink" title="JWT的认证流程图"></a>JWT的认证流程图</h4><p><img src="/2021/09/22/jwt/1620" alt="img"></p><blockquote><h2 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h2></blockquote><p>1，浏览器发起请求登陆，携带用户名和密码；</p><p>2，服务端验证身份，根据算法，将用户标识符打包生成 token, </p><p>3，服务器返回JWT信息给浏览器，JWT不包含敏感信息；</p><p>4，浏览器发起请求获取用户资料，把刚刚拿到的 token一起发送给服务器；</p><p>5，服务器发现数据中有 token，验明正身； </p><p>6，服务器返回该用户的用户资料；</p><h4 id="token与session的区别"><a href="#token与session的区别" class="headerlink" title="token与session的区别"></a>token与session的区别</h4><blockquote><p>session</p></blockquote><p><strong>Session是存放在服务器端的</strong>，可以保存在：内存、数据库、NoSQL中。它采用$\textcolor{red}{空间换时间的策略}$来进行身份识别，若Session没有持久化落地存储，一旦服务器重启，Session数据会丢失。</p><blockquote><p>token</p></blockquote><p><strong>Token是放在客户端存储的</strong>，采用了$\textcolor{red}{时间换空间策略}$，token类似一个<strong>令牌</strong>它<strong>也是无状态的</strong>，用户信息都被加密到token中，服务器收到token后解密就可知道是哪个用户。所以在分布式环境中应用广泛。</p><blockquote><p>适用场景</p></blockquote><p>一般购物车功能会采用Session验证，接口校验一般会采用Token验证，具体采用何种方法，需要大家根据自己的业务进行选择。</p><h4 id="JwtToken工具"><a href="#JwtToken工具" class="headerlink" title="JwtToken工具"></a>JwtToken工具</h4><blockquote><h3 id="配置yml文件"><a href="#配置yml文件" class="headerlink" title="配置yml文件"></a>配置yml文件</h3></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eshop:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">jwt-key:</span> <span class="string">eshopmini</span></span><br><span class="line">    <span class="attr">token-expired-in:</span> <span class="number">86400000</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JwtToken</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtToken</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer expiredTimeIn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">defaultScope</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eshop.security.jwt-key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtKey</span><span class="params">(String jwtKey)</span> &#123;</span><br><span class="line">        JwtToken.jwtKey = jwtKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eshop.security.token-expired-in&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpiredTimeIn</span><span class="params">(Integer expiredTimeIn)</span> &#123;</span><br><span class="line">        JwtToken.expiredTimeIn = expiredTimeIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取自定义数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Map&lt;String, Claim&gt;&gt; <span class="title function_">getClaims</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        DecodedJWT decodedJWT;</span><br><span class="line">        <span class="comment">// 指定算法</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(JwtToken.jwtKey); <span class="comment">// 编码</span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(decodedJWT.getClaims());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">verifyToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(JwtToken.jwtKey);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getExpireTime</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DateUtil.formatDateTime(JWT.decode(token).getExpiresAt()); <span class="comment">// 解码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeToken</span><span class="params">(Long uid,String uName, Integer scope)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JwtToken.getToken(uid,uName, scope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeToken</span><span class="params">(Long uid,String uName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JwtToken.getToken(uid,uName, JwtToken.defaultScope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取令牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Long uid,String uName, Integer scope)</span> &#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(JwtToken.jwtKey);</span><br><span class="line">        Map&lt;String,Date&gt; map = JwtToken.calculateExpiredIssues();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * withClaim(） 写入自定义数据</span></span><br><span class="line"><span class="comment">         * withExpiresAt() 设置过期时间</span></span><br><span class="line"><span class="comment">         * withIssuedAt() 设置当前时间</span></span><br><span class="line"><span class="comment">         * sign() 签名算法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;uid&quot;</span>, uid) <span class="comment">// payload 写入自定义数据</span></span><br><span class="line">                .withClaim(<span class="string">&quot;scope&quot;</span>, scope)</span><br><span class="line">                .withClaim(<span class="string">&quot;uName&quot;</span>, uName)</span><br><span class="line">                .withExpiresAt(map.get(<span class="string">&quot;expiredTime&quot;</span>))<span class="comment">//指定令牌过期时间</span></span><br><span class="line">                .withIssuedAt(map.get(<span class="string">&quot;now&quot;</span>)) <span class="comment">// 设置签发时间 即当前时间</span></span><br><span class="line">                .sign(algorithm);<span class="comment">//签名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Date&gt; <span class="title function_">calculateExpiredIssues</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Date&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取日历</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        calendar.add(Calendar.SECOND, JwtToken.expiredTimeIn);</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        map.put(<span class="string">&quot;now&quot;</span>, now);</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        map.put(<span class="string">&quot;expiredTime&quot;</span>, calendar.getTime());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="权限拦截器"><a href="#权限拦截器" class="headerlink" title="权限拦截器"></a>权限拦截器</h1><blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2></blockquote><p>拦截器 是在<strong>面向切面编程</strong>中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法。是基于JAVA的反射机制</p><blockquote><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2></blockquote><ul><li>请求到达 DispatcherServlet</li><li>DispatcherServlet 发送至 Interceptor ，执行 preHandle</li><li>请求达到 Controller</li><li>请求结束后，postHandle 执行</li></ul><blockquote><h2 id="拦截器和过滤器的执行顺序"><a href="#拦截器和过滤器的执行顺序" class="headerlink" title="拦截器和过滤器的执行顺序"></a>拦截器和过滤器的执行顺序</h2></blockquote><p>过滤前-&gt;拦截前-&gt;Action处理-&gt;拦截后-&gt;过滤后</p><blockquote><h2 id="自定义注解、自定义异常、用户权限、设置线程"><a href="#自定义注解、自定义异常、用户权限、设置线程" class="headerlink" title="自定义注解、自定义异常、用户权限、设置线程"></a>自定义注解、自定义异常、用户权限、设置线程</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eshop.api.ApiCode;</span><br><span class="line"><span class="keyword">import</span> com.eshop.api.UnAuthenticatedException;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.bean.LocalUser;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.util.JwtToken;</span><br><span class="line"><span class="keyword">import</span> com.eshop.constant.ShopConstants;</span><br><span class="line"><span class="keyword">import</span> com.eshop.modules.user.domain.ShopUser;</span><br><span class="line"><span class="keyword">import</span> com.eshop.modules.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.eshop.utils.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-04-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预处理preHandle()方法</span></span><br><span class="line"><span class="comment">     * 用户发送请求时，先执行preHandle()方法。会先按照顺序执行所有拦截器的preHandle方法，一直遇到return false为止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Optional&lt;AuthCheck&gt; authCheck = <span class="built_in">this</span>.getAuthCheck(handler);</span><br><span class="line">        <span class="keyword">if</span> (!authCheck.isPresent())&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 先获取服务端的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeader( <span class="string">&quot;Authorization&quot;</span> );</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty( bearerToken ))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取令牌前缀  防止信息伪造</span></span><br><span class="line">        <span class="keyword">if</span> (!bearerToken.startsWith(<span class="string">&quot;Bearer&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] tokens = bearerToken.split( <span class="string">&quot; &quot;</span> );</span><br><span class="line">        <span class="keyword">if</span>(!(tokens.length == <span class="number">2</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokens[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        Optional&lt;Map&lt;String, Claim&gt;&gt; optionalMap = JwtToken.getClaims( token );</span><br><span class="line">        <span class="comment">//orElseThrow：有token 就没有异常</span></span><br><span class="line">        Map&lt;String, Claim&gt; map = optionalMap.orElseThrow( () -&gt; <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>( ApiCode.UNAUTHORIZED ) );</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">uName</span> <span class="operator">=</span> map.get( <span class="string">&quot;uName&quot;</span> ).asString();</span><br><span class="line">        <span class="comment">// YSHOP_APP_LOGIN_USER= &quot;app-online-token:&quot;;  </span></span><br><span class="line">        <span class="keyword">if</span> (redisUtils.get(ShopConstants.YSHOP_APP_LOGIN_USER+uName+<span class="string">&quot;:&quot;</span>+token) == <span class="literal">null</span>)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED); <span class="comment">//  ApiCode 是自定义异常（enum） UNAUTHORIZED(401, &quot;非法访问&quot;),</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="built_in">this</span>.hasPermission(authCheck.get(),map);</span><br><span class="line">        <span class="keyword">if</span> (valid)&#123;</span><br><span class="line">            <span class="built_in">this</span>.setToThreadLocal(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setToThreadLocal</span><span class="params">(Map&lt;String, Claim&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> map.get( <span class="string">&quot;uid&quot;</span> ).asInt();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">scope</span> <span class="operator">=</span> map.get( <span class="string">&quot;scope&quot;</span> ).asInt();</span><br><span class="line">        <span class="type">ShopUser</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById( uid );</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.NOT_PERMISSION);   <span class="comment">// NOT_PERMISSION(403, &quot;没有权限&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line">        LocalUser.set(user,scope) ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        //设置用户，范围</span></span><br><span class="line"><span class="comment">        public static void set(ShopUser user, Integer scope) &#123;</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">        map.put(&quot;user&quot;, user);</span></span><br><span class="line"><span class="comment">        map.put(&quot;scope&quot;, scope);</span></span><br><span class="line"><span class="comment">        LocalUser.threadLocal.set(map);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authCheck</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(AuthCheck authCheck, Map&lt;String, Claim&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">level</span> <span class="operator">=</span> authCheck.value();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">scope</span> <span class="operator">=</span> map.get( <span class="string">&quot;scope&quot;</span> ).asInt();</span><br><span class="line">        <span class="keyword">if</span> (level &gt; scope)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.NOT_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Optional&lt;T&gt;是在java.util包下的一个用于代替null的一个工具类</span></span><br><span class="line"><span class="comment">     * 它是用于包装一个对象的</span></span><br><span class="line"><span class="comment">     * 当你要使用这个包装对象的时候，你要先问问Optional它包装的对象是不是null，是的话你就要小心空指针了，这就是Optional类的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;AuthCheck&gt; <span class="title function_">getAuthCheck</span><span class="params">(Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// instanceof 它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</span></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span>  HandlerMethod)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * HandlerMethod封装了很多属性，在访问请求方法的时候可以方便的访问到方法、方法参数、方法上的注解、所属类等并且对方法参数封装处理，</span></span><br><span class="line"><span class="comment">             * 也可以方便的访问到方法参数的注解等信息。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">            <span class="comment">// 获取方法上的注解</span></span><br><span class="line">            <span class="type">AuthCheck</span> <span class="variable">authCheck</span> <span class="operator">=</span> handlerMethod.getMethod().getAnnotation( AuthCheck.class );</span><br><span class="line">            <span class="keyword">if</span> (authCheck == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> Optional.empty();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(authCheck);  <span class="comment">// 如果指定的值为null，则此方法将引发NullPointerException。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> 自定义权限注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthCheck &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eshop.common.interceptor.PermissionInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> 注册拦截器配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.avatar&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String avatar;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将自己编写的拦截器注册进来</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerInterceptor <span class="title function_">getPermissionInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PermissionInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor( <span class="built_in">this</span>.getPermissionInterceptor() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">avatarUtl</span> <span class="operator">=</span> <span class="string">&quot;file:&quot;</span> + avatar.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pathUtl</span> <span class="operator">=</span> <span class="string">&quot;file:&quot;</span> + path.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 静态资源处理  addResourceLocations 指的是内部文件放置的目录  setCachePeriod 缓存期限</span></span><br><span class="line">        <span class="comment">// 意思就是,前端浏览器访问路径带有/file/**就转到对应磁盘下读取图片, </span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/avatar/**&quot;</span>).addResourceLocations(avatarUtl).setCachePeriod(<span class="number">0</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/file/**&quot;</span>).addResourceLocations(pathUtl).setCachePeriod(<span class="number">0</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>).setCachePeriod(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件存储路径</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\eshop\file\</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">D:\eshop\avatar\</span></span><br><span class="line">  <span class="comment"># 文件大小 /M</span></span><br><span class="line">  <span class="attr">maxSize:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">avatarMaxSize:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="Xss过滤器"><a href="#Xss过滤器" class="headerlink" title="Xss过滤器"></a>Xss过滤器</h1><blockquote><h2 id="定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序"><a href="#定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序" class="headerlink" title="定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序"></a>定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序</h2></blockquote><blockquote><h2 id="配置-yml文件"><a href="#配置-yml文件" class="headerlink" title="配置 yml文件"></a>配置 yml文件</h2></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 防止XSS攻击</span></span><br><span class="line"><span class="attr">xss:</span> </span><br><span class="line">  <span class="comment"># 过滤开关</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 排除链接（多个用逗号分隔）</span></span><br><span class="line">  <span class="attr">excludes:</span></span><br><span class="line">  <span class="comment"># 匹配链接</span></span><br><span class="line">  <span class="attr">urlPatterns:</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="导依赖"><a href="#导依赖" class="headerlink" title="导依赖"></a>导依赖</h2></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="Escape工具-EscapeUtil"><a href="#Escape工具-EscapeUtil" class="headerlink" title="Escape工具-EscapeUtil"></a>Escape工具-EscapeUtil</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HTMLFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EscapeUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RE_HTML_MARK</span> <span class="operator">=</span> <span class="string">&quot;(&lt;[^&lt;]*?&gt;)|(&lt;[\\s]*?/[^&lt;]*?&gt;)|(&lt;[^&lt;]*?/[\\s]*?&gt;)&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[][] TEXT = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">64</span>][];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EscapeUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *Escape编码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">escape</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encode(text);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *Escape解码。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unescape</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">clean</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">HTMLFilter</span>()).filter(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> (text != <span class="literal">null</span> &amp;&amp; (len = text.length()) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(len + (len &gt;&gt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> text.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                    buffer.append(TEXT[c]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer.append(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> buffer.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decode</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(content)) &#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(content.length());</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(lastPos &lt; content.length()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> content.indexOf(<span class="string">&quot;%&quot;</span>, lastPos);</span><br><span class="line">                <span class="keyword">if</span> (pos == lastPos) &#123;</span><br><span class="line">                    <span class="type">char</span> ch;</span><br><span class="line">                    <span class="keyword">if</span> (content.charAt(pos + <span class="number">1</span>) == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                        ch = (<span class="type">char</span>)Integer.parseInt(content.substring(pos + <span class="number">2</span>, pos + <span class="number">6</span>), <span class="number">16</span>);</span><br><span class="line">                        tmp.append(ch);</span><br><span class="line">                        lastPos = pos + <span class="number">6</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ch = (<span class="type">char</span>)Integer.parseInt(content.substring(pos + <span class="number">1</span>, pos + <span class="number">3</span>), <span class="number">16</span>);</span><br><span class="line">                        tmp.append(ch);</span><br><span class="line">                        lastPos = pos + <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                    tmp.append(content.substring(lastPos));</span><br><span class="line">                    lastPos = content.length();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp.append(content.substring(lastPos, pos));</span><br><span class="line">                    lastPos = pos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tmp.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        System.out.println(clean(html));</span><br><span class="line">        System.out.println(escape(html));</span><br><span class="line">        System.out.println(unescape(html));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i) &#123;</span><br><span class="line">            TEXT[i] = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;(<span class="type">char</span>)i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TEXT[<span class="number">39</span>] = <span class="string">&quot;&amp;#039;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">34</span>] = <span class="string">&quot;&amp;#34;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">38</span>] = <span class="string">&quot;&amp;#38;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">60</span>] = <span class="string">&quot;&amp;#60;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">62</span>] = <span class="string">&quot;&amp;#62;&quot;</span>.toCharArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="xss过滤包装类"><a href="#xss过滤包装类" class="headerlink" title="xss过滤包装类"></a>xss过滤包装类</h2></blockquote><p>增加一个xssHttpServletRequestWrapper类,这个类重写了获取参数的方法，在获取参数时做了xss替换处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eshop.utils.html.EscapeUtil;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] values = <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> values.length;</span><br><span class="line">            String[] escapseValues = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">                <span class="comment">//过滤一切可能的xss攻击字符串</span></span><br><span class="line">                escapseValues[i] = EscapeUtil.clean(values[i]).trim();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> escapseValues;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="XssFilter过滤器"><a href="#XssFilter过滤器" class="headerlink" title="XssFilter过滤器"></a>XssFilter过滤器</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排除链接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; excludes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xss过滤开关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *filterConfig.getInitParameter 它能够访问部署描述符文件（web.xml）中分配的过滤器初始化参数。</span></span><br><span class="line"><span class="comment">        *简单来说 这个方法 能够读取yml配置文件</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tempExcludes</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;excludes&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tempEnabled</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">        <span class="comment">//将不需要xss过滤的接口添加到列表中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(tempExcludes)) &#123;</span><br><span class="line">            String[] url = tempExcludes.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; url != <span class="literal">null</span> &amp;&amp; i &lt; url.length; ++i) &#123;</span><br><span class="line">                <span class="built_in">this</span>.excludes.add(url[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(tempEnabled)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.enabled = Boolean.valueOf(tempEnabled);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest)request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse)response;</span><br><span class="line">        <span class="comment">//如果该访问接口在排除列表里面则不拦截</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.handleExcludeURL(req, resp)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//拦截该url并进行xss过滤</span></span><br><span class="line">            <span class="type">XssHttpServletRequestWrapper</span> <span class="variable">xssRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XssHttpServletRequestWrapper</span>((HttpServletRequest)request);</span><br><span class="line">            chain.doFilter(xssRequest, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleExcludeURL</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.enabled) &#123;</span><br><span class="line">            <span class="comment">//如果xss开关关闭了，则所有url都不拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.excludes != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.excludes.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.excludes.iterator();</span><br><span class="line"></span><br><span class="line">            Matcher m;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!var4.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> (String)var4.next();</span><br><span class="line">                <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^&quot;</span> + pattern);</span><br><span class="line">                m = p.matcher(url);</span><br><span class="line">            &#125; <span class="keyword">while</span>(!m.find());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="注册Bean过滤"><a href="#注册Bean过滤" class="headerlink" title="注册Bean过滤"></a>注册Bean过滤</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.eshop.xss.XssFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Filter配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有了 proxyBeanMethods 属性后，配置类不会被代理了。 主要是为了提高性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xss.enabled&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String enabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xss.excludes&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String excludes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//$&#123;&#125; 从配置文件中读取xss.urlPatterns的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xss.urlPatterns&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String urlPatterns;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用：告诉编译器忽略指定的警告，不用在编译完成后出现警告信息</span></span><br><span class="line"><span class="comment">     * 告诉编译器忽略 unchecked 警告信息，如使用List，ArrayList等未进行参数化产生的警告信息。</span></span><br><span class="line"><span class="comment">     * rawtypes 原始类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 注册bean过滤器</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">xssFilterRegistration</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        <span class="comment">// 设置分发器  分发器的类型为 请求</span></span><br><span class="line">        registration.setDispatcherTypes(DispatcherType.REQUEST);</span><br><span class="line">        <span class="comment">// 设置过滤器</span></span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">XssFilter</span>());</span><br><span class="line">        <span class="comment">// 设置 增加父网址 以 “,” 号分割</span></span><br><span class="line">        registration.addUrlPatterns(StrUtil.split(urlPatterns, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置过滤名字</span></span><br><span class="line">        registration.setName(<span class="string">&quot;xssFilter&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置顺序</span></span><br><span class="line">        registration.setOrder(Integer.MAX_VALUE);</span><br><span class="line">        <span class="comment">// 创建 map 命名为 初始化参数</span></span><br><span class="line">        Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(<span class="string">&quot;excludes&quot;</span>, excludes);</span><br><span class="line">        initParameters.put(<span class="string">&quot;enabled&quot;</span>, enabled);</span><br><span class="line">        <span class="comment">// 过滤器设置初始化参数 将其 initParameters 放入</span></span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        <span class="comment">// 并返回</span></span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><blockquote><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2></blockquote><ul><li>初始化，创建本地仓库</li></ul><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520133526237.png" alt="image-20220520133526237"></p><blockquote><h2 id="初始化-命令：-git-init"><a href="#初始化-命令：-git-init" class="headerlink" title="初始化 命令： git init"></a>初始化 命令： git init</h2></blockquote><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520133610542.png" alt="image-20220520133610542"></p><ul><li>将本地文件添加到本地仓库</li></ul><blockquote><h2 id="添加本次仓库命令：-git-add"><a href="#添加本次仓库命令：-git-add" class="headerlink" title="添加本次仓库命令： git add ."></a>添加本次仓库命令： git add .</h2></blockquote><p><strong>注意 add 和 . 之间是有空格的</strong></p><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520133856100.png" alt="image-20220520133856100"></p><ul><li>添加注释  作用为提交暂存区的文件（也就是上一步添加的文件） 后面双引号内可以填写关于提交的注释信息。</li></ul><blockquote><h2 id="添加注释的命令：git-commit-m-“-“"><a href="#添加注释的命令：git-commit-m-“-“" class="headerlink" title="添加注释的命令：git commit -m “ “"></a>添加注释的命令：git commit -m “ “</h2></blockquote><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134130092.png" alt="image-20220520134130092"></p><ul><li>添加远程仓库，打开gitee 或者 github 新建仓库</li></ul><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134255675.png" alt="image-20220520134255675"></p><ul><li><p>建立本地仓库和远程仓库的关联</p><ul><li><p>复制新建仓库的地址</p><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134512013.png" alt="image-20220520134512013"></p></li></ul></li></ul><p><strong>关联</strong></p><blockquote><h2 id="关联的命令-git-remote-add-origin-后面是新建仓库的地址"><a href="#关联的命令-git-remote-add-origin-后面是新建仓库的地址" class="headerlink" title="关联的命令:  git remote add origin  后面是新建仓库的地址"></a>关联的命令:  git remote add origin  后面是新建仓库的地址</h2></blockquote><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134605087.png" alt="image-20220520134605087"></p><ul><li>同步仓库内容 本地仓库和远程仓库的内容是一样的</li></ul><blockquote><h2 id="同步仓库命令：git-pull-–rebase-origin-master"><a href="#同步仓库命令：git-pull-–rebase-origin-master" class="headerlink" title="同步仓库命令：git pull –rebase origin master"></a>同步仓库命令：git pull –rebase origin master</h2></blockquote><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134734791.png" alt="image-20220520134734791"></p><ul><li>上传文件</li></ul><blockquote><h2 id="上传命令：git-push-u-origin-master"><a href="#上传命令：git-push-u-origin-master" class="headerlink" title="上传命令：git push -u origin master"></a>上传命令：git push -u origin master</h2></blockquote><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134850683.png" alt="image-20220520134850683"></p><p>上传成功后看远程仓库</p><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520134945284.png" alt="image-20220520134945284"></p><ul><li>如果 git push -u origin master出错 如下图</li></ul><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520140357507.png" alt="image-20220520140357507"></p><blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2></blockquote><ul><li>先输入命令 git pull –rebase origin master</li></ul><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520140446772.png" alt="image-20220520140446772"></p><ul><li><p>再上传文件 命令： git push origin master</p><p><img src="/2021/06/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520140539183.png" alt="image-20220520140539183"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>knife4j</title>
      <link href="/2021/05/26/knife4j/"/>
      <url>/2021/05/26/knife4j/</url>
      
        <content type="html"><![CDATA[<h1 id="Knife4j"><a href="#Knife4j" class="headerlink" title="Knife4j"></a>Knife4j</h1><blockquote><h2 id="什么是knife4j"><a href="#什么是knife4j" class="headerlink" title="什么是knife4j"></a>什么是knife4j</h2></blockquote><p>knife4是为<strong>Java MVC框架集成Swagger生成Api 文档 的增强解决方案</strong></p><blockquote><h2 id="knife4j的作用"><a href="#knife4j的作用" class="headerlink" title="knife4j的作用"></a>knife4j的作用</h2></blockquote><p><strong>接口文档使得项目开发过程中前后端工程师有一个统一的文件进行沟通交流开发，项目维护中或者项目人员更迭，方便后期人员查看、维护</strong></p><h2 id="springBoot整合knife4j"><a href="#springBoot整合knife4j" class="headerlink" title="springBoot整合knife4j"></a>springBoot整合knife4j</h2><blockquote><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- knife4j接口文档 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 避免版本冲突 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>29.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="knife4j-配置"><a href="#knife4j-配置" class="headerlink" title="knife4j 配置"></a>knife4j 配置</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Knife4j配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yezhiqiu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            <span class="comment">// 配置协议</span></span><br><span class="line">                .protocols(Collections.singleton(<span class="string">&quot;https&quot;</span>))</span><br><span class="line">                .host(<span class="string">&quot;https://www.talkxj.com&quot;</span>)</span><br><span class="line">            <span class="comment">// 创建接口文档的具体信息</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">// 创建选择器，控制哪些接口被加入文档</span></span><br><span class="line">                .select()</span><br><span class="line">             <span class="comment">//这里指定扫描有ApiOperation注解的类</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.minzheng.blog.controller&quot;</span>))</span><br><span class="line">            <span class="comment">// 配置过滤哪些</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            <span class="comment">// 接口说明</span></span><br><span class="line">                .title(<span class="string">&quot;博客api文档&quot;</span>)</span><br><span class="line">            <span class="comment">// OpenAPI规范接口描述</span></span><br><span class="line">                .description(<span class="string">&quot;springboot开发的博客项目&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;宇轩&quot;</span>, <span class="string">&quot;https://github.com/Y3196&quot;</span>, <span class="string">&quot;793302276@qq.com&quot;</span>))</span><br><span class="line">            <span class="comment">// 配置Url</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://www.talkxj.com/api&quot;</span>)</span><br><span class="line">             <span class="comment">// 版本</span></span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><blockquote><h2 id="knife4j配置"><a href="#knife4j配置" class="headerlink" title="knife4j配置"></a>knife4j配置</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;2.X版本&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.basePackage(&quot;com.github.xiaoymin.knife4j.controller&quot;))</span></span><br><span class="line">                <span class="comment">//这里指定扫描有ApiOperation注解的类</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                <span class="comment">//所有路径</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                <span class="comment">//不包含^/inner/.*的路径</span></span><br><span class="line">                <span class="comment">//.paths(input -&gt; !input.matches(&quot;^/inner/.*&quot;))</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;宇轩的RESTful APIs&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;商城RESTful APIs&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://blog.csdn.net/weixin_43453386&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;宇轩&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;https://github.com/Y3196&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;793302276@qq.com&quot;</span>))</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(value = &quot;测试controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;姓名&quot;, required = true)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;欢迎光临&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/welcome&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">welcome</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(name + <span class="string">&quot;，welcome&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/26/knife4j/image-20220526095109330.png" alt="image-20220526095109330"></p><p><img src="/2021/05/26/knife4j/image-20220526095147012.png" alt="image-20220526095147012"></p><p><img src="/2021/05/26/knife4j/image-20220526095201601.png" alt="image-20220526095201601"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的使用</title>
      <link href="/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx的使用"><a href="#Nginx的使用" class="headerlink" title="Nginx的使用"></a>Nginx的使用</h1><p><img src="https://www.it7a.com/wp-content/uploads/2020/11/nginx.png" alt="查看源图像"></p><blockquote><h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2></blockquote><p><em>Nginx</em> (engine x) 是一个高性能的$\color{blue}{HTTP和反向代理web服务器} $，</p><blockquote><h2 id="Nginx与Apache、Lighttpd-的综合对比"><a href="#Nginx与Apache、Lighttpd-的综合对比" class="headerlink" title="Nginx与Apache、Lighttpd 的综合对比"></a>Nginx与Apache、Lighttpd 的综合对比</h2></blockquote><p><img src="https://pic1.zhimg.com/80/v2-f2260990a67a26944086f384f6e9e434_720w.jpg" alt="img"></p><blockquote><h2 id="Nginx-的特点"><a href="#Nginx-的特点" class="headerlink" title="Nginx 的特点"></a>Nginx 的特点</h2></blockquote><p>高并发、高性能</p><p>可扩展性好</p><p>高可靠性</p><p>热部署</p><p>BSD许可证</p><blockquote><h2 id="Nginx-的下载"><a href="#Nginx-的下载" class="headerlink" title="Nginx 的下载"></a>Nginx 的下载</h2></blockquote><ul><li><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></li><li>下载解压后</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/72623c3cc893faee7d18f1b0946a936d.png" alt="img"></p><ul><li>启动Nginx<ol><li>直接双击<strong>nginx.exe</strong></li><li>在该目录中打开命令窗口（cmd），输入命令nginx.exe</li></ol></li></ul><p><img src="/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220522144325177.png" alt="image-20220522144325177"></p><p>​3.检查nginx是否启动成功，直接在浏览器地址输入  <a href="http://localhost/">http://localhost:80</a>  出现以下图片就证明启动成功！！！！！</p><p>​<img src="https://img-blog.csdnimg.cn/img_convert/681cf285ce268f21cc5353fb939c960d.png" alt="img"></p><ul><li>关闭nginx命令<ul><li>输入nginx命令 <code>nginx -s stop</code>(快速停止nginx) 或 <code>nginx -s quit</code>(完整有序的停止nginx)</li></ul></li></ul><blockquote><h2 id="负载均衡、反向代理的配置"><a href="#负载均衡、反向代理的配置" class="headerlink" title="负载均衡、反向代理的配置"></a>负载均衡、反向代理的配置</h2></blockquote><ul><li>负载均衡：就是把<strong>大量的请求</strong>$\color{blue}{按照我们指定的方式均衡的分配} $给<strong>集群中的每台服务器</strong>，从而不会产生集群中<strong>大量请求只请求某一台服务器</strong>，从而$\color{red}{使该服务器宕机的情况} $。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201102192514457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pwZjE4MTM3NjM2Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>负载均衡的配置语法：upstream xxx{} <strong>其中xxx 是可以随便起名字的</strong></li></ul><p><img src="/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220522145511138.png" alt="image-20220522145511138"></p><p><strong>也可以是 server localhost:8080；</strong></p><p><strong>其中 weight 是权重轮询</strong></p><ul><li>反向代理：实现负载均衡之前我们<strong>要先实现反向代理</strong>即请求到某个域名，默认该请求被nginx接收到，然后nginx根据配置，类似DNS解析，nginx会$\color{blue}{根据配置把特定的请求转发到对应的服务器} $</li></ul><p><img src="https://img-blog.csdnimg.cn/20201102193429816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pwZjE4MTM3NjM2Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>反向代理的配置语法：proxy_pass http:&#x2F;&#x2F; xxx  <strong>这里的xxx对应负载均衡里的xxx</strong></li></ul><p><img src="/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220522150614638.png" alt="image-20220522150614638"></p><blockquote><h2 id="nginx配置访问本地静态资源"><a href="#nginx配置访问本地静态资源" class="headerlink" title="nginx配置访问本地静态资源"></a>nginx配置访问本地静态资源</h2></blockquote><p>正常情况下，双击exe启动文件后，访问localhost:80，nginx默认回去找到nginx的html下面的index.html</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU3MDU3OTYtMTIwNjEwNDc2OC5wbmc=" alt="img"></p><ul><li>第一种配置，使用本地绝对路径，将静态的html放到你的这个目录下，我这里的路径是：D:&#x2F;tools&#x2F;nginx&#x2F;2&#x2F;html1;</li></ul><p> 访问本地绝对路径下的静态html</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">#root html;</span><br><span class="line">root D:/tools/nginx/2/html1;</span><br><span class="line">index index.html index.htm;  # index 代表html文件的index.html作为首页。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在黑窗口:<strong>nginx -s reload</strong> 一下。</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU3NTA1NjktMjg5MDU0OTA3LnBuZw==" alt="img"></p><ul><li>为了$\color{red}{保证一定的安全性} $，也可以在访问的地址后<strong>拼接上一个字符串</strong>，比如我这里加了page,总体的配置如下，</li></ul><p>访问路径拼接 &#x2F;pages 访问本地绝绝对路径下的静态html</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /pages/ &#123;</span><br><span class="line">alias D:/tools/nginx/2/html1/;</span><br><span class="line">autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问，仍然可以访问到该目录下的html</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU4NDA2MDItMTg4MTc3OTQzMi5wbmc=" alt="img"></p><p>其中autoindex on; 的作用</p><ul><li>配置完<code>autoindex</code>服务后，启动<code>Nginx</code>，打开浏览器访问<code>autoindex</code>服务的<code>url</code>，如图所示</li></ul><p><img src="https://img-blog.csdnimg.cn/20210611202753510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5ODg4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>图片的访问：使用<strong>绝对路径进行访问</strong>，访问路径拼接 upload 访问本地绝对路径下的某图片</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /upload/ &#123;</span><br><span class="line">alias D:/tools/nginx/2/image1/;</span><br><span class="line">autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU5MzE0MjctMzQwMjIyMTY4LnBuZw==" alt="img"></p><blockquote><h2 id="nginx解决跨域问题"><a href="#nginx解决跨域问题" class="headerlink" title="nginx解决跨域问题"></a>nginx解决跨域问题</h2></blockquote><ul><li><p>什么是跨域：跨域，指的是浏览器<strong>不能执行其他网站的脚本</strong>。它是由浏览器的<strong>同源策略</strong>造成的，是浏览器施加的安全限制。</p></li><li><p>白话理解：就比如你刚刚登录了淘宝买了东西，但是你现在又点进去了另外一个网站，那么你现在的淘宝账户是属于登录状态，而并没有登出，所以你现在点进去的这个网站可以看到你的账户信息，并操作你的账户信息，这样子就很危险。</p></li><li><p>同源策略：同源策略，单说来就是同协议，同域名，同端口</p></li></ul><p><img src="https://pic2.zhimg.com/80/v2-31bfbd1f364b096d77cf94b277e48861_720w.jpg" alt="img"></p><ul><li><p>跨域事例：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9769d21f3b8b80898180b192eacb29ec.png" alt="img"></p></li><li><p>nginx解决跨域问题</p></li></ul><p><img src="/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220522153334291.png" alt="image-20220522153334291"></p><ul><li><p>Java后端解决跨域问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：LionCity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020-12-21 13:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(-9999)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">extends</span> <span class="title class_">HttpFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域提供支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8387103310559517243L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> req.getHeader(HttpHeaders.ORIGIN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(origin))&#123;</span><br><span class="line">            <span class="comment">// ORIGIN 起源  允许origin访问您的资源</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);</span><br><span class="line">            <span class="comment">// HEADERS 请求头/标题</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, <span class="string">&quot;Origin, x-requested-with, Content-Type, Accept, Authorization&quot;</span>);</span><br><span class="line">           <span class="comment">// CREDENTIALS  凭证  是否支持跨域用户凭证</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="comment">// METHODS 请求方式   当前站点支持的跨域请求类型是什么</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, <span class="string">&quot;GET, POST, PUT, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">           <span class="comment">// _EXPOSE_HEADERS 暴露标题  让客户端可以访问到其他的首部信息</span></span><br><span class="line">            <span class="comment">//  在客户端就可以通过XMLHttpRequest对象的getResponseHeader 方法，获取到响应头（以下6个）字段的值</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, <span class="string">&quot;Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma&quot;</span>);</span><br><span class="line">            <span class="comment">// 最大的年限  超时时长</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, <span class="string">&quot;60&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.doFilter(req, res, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><h2 id="nginx缓存"><a href="#nginx缓存" class="headerlink" title="nginx缓存"></a>nginx缓存</h2></blockquote><ul><li>什么时nginx的缓存：<strong>利用请求的局部性原理，下次访问不再连接后端服务器</strong></li></ul><p><img src="/2021/04/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/1204916-20171111201426653-2073877684.png" alt="img"></p><ul><li><p>nginx<strong>实现缓存</strong>是通过代理缓存  <strong>pxory_cache</strong>  这也是<code>ngx_http_proxy_module</code>模块提供的功能， 这里配置选项较多， 常用的选项有： <code>proxy_cache_path</code>、 <code>proxy_cache</code>和<code>proxy_cache_valid</code>。</p><ul><li><p>proxy_cache_path 定义一个<strong>完整的缓存空间</strong>，指定缓存数据的磁盘路径、索引存放的内存空间以及一些其他参数，如缓存删除策略。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_path /data/cache levels=1:2 keys_zone=web:10m max_size=1G inactive=10;　　　//缓存数据存储在/data/cache目录中</span><br></pre></td></tr></table></figure><ul><li>&#96;&#96;&#96;xml<br>levels：配置在该目录下再分两层目录，一层1个随机字符作为名称，二层2个随机字符作为名称，levels最多三层，每层最多两个字符，这是为了加快访问文件的速度；最后使用代理url的哈希值作为关键字与文件名，一个缓存数据如下： &#x2F;data&#x2F;nginx&#x2F;cache&#x2F;c&#x2F;29&#x2F;b7f54b2df7773722d382f4809d65029c;<br>keys_zone：用来为这个缓存区起名，并设置大小。上面的例子就是指定名称为web，这个名称后面proxy_cache需要引用；而10m就是内存空间的大小；<br>max_size：指定最大缓存数据磁盘空间的大小；<br>inactive：在inactive指定的时间内，未被访问的缓存数据将从缓存中删除 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `proxy_cache`用来引用上面`proxy_cache_path`定义的缓存空间， 现时打开缓存功能， 如下：</span><br><span class="line"></span><br><span class="line">```conf</span><br><span class="line">　　proxy_cache web；             //引用上面定义上的缓存空间， 同一缓存空间可以在几个地方使用</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>　<code>proxy_cache_valid</code>设置不同响应代码的缓存时间， 如：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m;</span><br></pre></td></tr></table></figure><ul><li><strong>配置nginx缓存实例</strong></li></ul><p>先配置<code>proxy_cache_path</code>，再配置<code>proxy_cache</code>引用、打开缓存空间，接着配置两个<code>proxy_cache_valid</code></p><p>定义一个完整的缓存空间；<strong>缓存数据存储在&#x2F;data&#x2F;cache目录中</strong>；配置在该目录下再分两层目录；名称为web(proxy_cache引用)；10m内存空间大小；最大缓存数据磁盘空间的大小；10分钟未被访问的缓存数据将从缓存中删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">proxy_cache_path /data/cache levels=1:2 keys_zone=web:10m max_size=1G inactive=10m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line">#charset koi8-r;</span><br><span class="line">#access_log logs/host.access.log main;</span><br><span class="line">add_header Magedu-Cache &quot;$upstream_cache_status form $server_addr&quot;;　　　　//给请求响应增加一个头部信息，表示从服务器上返回的cache状态怎么样（有没有命中）</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://webserver;　　　　//引用上面定义的upstream负载均衡组</span><br><span class="line">proxy_cache web;　　　　//引用上面定义上的缓存空间，同一缓存空间可以在几个地方使用</span><br><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m;　　　　//对代码200和302的响应设置10分钟的缓存，对代码404的响应设置为1分钟;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后献上ngxin的配置"><a href="#最后献上ngxin的配置" class="headerlink" title="最后献上ngxin的配置"></a>最后献上ngxin的配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">upstream ting&#123;</span><br><span class="line">// 负载均衡配置</span><br><span class="line">server 127.0.0.1.8080 weight=1 # 加权重轮询</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;  # 如果访问80端口根目录请求，就会走到 location / 下的配置中反向代理的地址</span><br><span class="line">// 代理</span><br><span class="line">location / &#123;</span><br><span class="line"> root   html; #访问的资源目录</span><br><span class="line">         index  index.html index.htm; #访问的资源名称</span><br><span class="line"># 允许跨域请求的“域”</span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; $http_origin;  #$http_origin 可以改为要跨域访问 ting这个端口的服务 比如：http:localhost:8080 要跨域访问ting这个服务</span><br><span class="line"># 允许客户端提交Cookie</span><br><span class="line">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line"># 允许客户端的请求方法</span><br><span class="line">add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS, DELETE, PUT&#x27;;</span><br><span class="line"># 允许客户端提交的的请求头</span><br><span class="line">add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Origin, x-requested-with, Content-Type, Accept, Authorization&#x27;;</span><br><span class="line"># 允许客户端访问的响应头</span><br><span class="line">add_header &#x27;Access-Control-Expose-Headers&#x27; &#x27;Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma&#x27;;</span><br><span class="line"># 处理预检请求</span><br><span class="line">if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line"># 预检请求缓存时间</span><br><span class="line">add_header &#x27;Access-Control-Max-Age&#x27; 1728000;</span><br><span class="line">add_header &#x27;Content-Type&#x27; &#x27;text/plain; charset=utf-8&#x27;;</span><br><span class="line">add_header &#x27;Content-Length&#x27; 0;</span><br><span class="line">return 204;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass http://ting  # 访问80端口会跳到这里</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>security</title>
      <link href="/2021/03/25/security/"/>
      <url>/2021/03/25/security/</url>
      
        <content type="html"><![CDATA[<h1 id="springSecurity"><a href="#springSecurity" class="headerlink" title="springSecurity"></a>springSecurity</h1><blockquote><h2 id="什么是springSecurity"><a href="#什么是springSecurity" class="headerlink" title="什么是springSecurity"></a>什么是springSecurity</h2></blockquote><p>Spring Security是一个高度自定义的<strong>安全框架</strong>。利用Spring IoC&#x2F;DI和AOP功能，为系统提供了声明式安全访问控制功能，减少了为系统安全而编写大量重复代码的工作。</p><blockquote><h2 id="能解决的安全性问题"><a href="#能解决的安全性问题" class="headerlink" title="能解决的安全性问题"></a>能解决的安全性问题</h2></blockquote><ol><li><strong>web请求级别</strong>：使用Servlet规范中的过滤器（Filter）保护Web请求并限制URL级别的访问。</li><li><strong>方法调用级别</strong>：使用Spring AOP保护方法调用，确保具有适当权限的用户才能访问安全保护的方法。</li></ol><h2 id="springSecurity的一些配置"><a href="#springSecurity的一些配置" class="headerlink" title="springSecurity的一些配置"></a>springSecurity的一些配置</h2><blockquote><h2 id="创建springSecurity的配置类"><a href="#创建springSecurity的配置类" class="headerlink" title="创建springSecurity的配置类"></a>创建springSecurity的配置类</h2></blockquote><ul><li><p>了解 <strong>WebSecurityConfigurerAdapter</strong> 在项目中的常用配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.wideth.framework.security.handle.AuthenticationEntryPointImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"><span class="keyword">import</span> cn.wideth.framework.security.filter.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> cn.wideth.framework.security.handle.LogoutSuccessHandlerImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring security配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义用户认证逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证失败处理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPointImpl unauthorizedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出处理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandlerImpl logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token认证过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter authenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CorsFilter corsFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决 无法直接注入 AuthenticationManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 强散列哈希加密实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">bCryptPasswordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份认证接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在这里关联数据库和security</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * anyRequest          |   匹配所有请求路径</span></span><br><span class="line"><span class="comment">     * access              |   SpringEl表达式结果为true时可以访问</span></span><br><span class="line"><span class="comment">     * anonymous           |   匿名可以访问</span></span><br><span class="line"><span class="comment">     * denyAll             |   用户不能访问</span></span><br><span class="line"><span class="comment">     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）</span></span><br><span class="line"><span class="comment">     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问</span></span><br><span class="line"><span class="comment">     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问</span></span><br><span class="line"><span class="comment">     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问</span></span><br><span class="line"><span class="comment">     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问</span></span><br><span class="line"><span class="comment">     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问</span></span><br><span class="line"><span class="comment">     * permitAll           |   用户可以任意访问</span></span><br><span class="line"><span class="comment">     * rememberMe          |   允许通过remember-me登录的用户访问</span></span><br><span class="line"><span class="comment">     * authenticated       |   用户登录后可访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">        httpSecurity</span><br><span class="line">                <span class="comment">// CSRF禁用，因为不使用session</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">// 认证失败处理类</span></span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()</span><br><span class="line">                <span class="comment">// 基于token，所以不需要session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                <span class="comment">// 过滤请求</span></span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录login 验证码captchaImage 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/captchaImage&quot;</span>).anonymous()</span><br><span class="line">                .antMatchers(</span><br><span class="line">                        HttpMethod.GET,</span><br><span class="line">                        <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.js&quot;</span></span><br><span class="line">                ).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/profile/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/common/download**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/common/download/resource**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-resources/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/webjars/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/*/api-docs&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/druid/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/flowable/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/socket/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/common/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/contract/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/project/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/document/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/purchase/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .headers().frameOptions().disable();</span><br><span class="line">        httpSecurity.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">        <span class="comment">// 添加JWT filter</span></span><br><span class="line">        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">// 添加CORS filter</span></span><br><span class="line">        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);</span><br><span class="line">        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 核心过滤器配置方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(web);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：上面 WebSecurityConfigurerAdapter 中覆写（@Override）了三个<strong>configure方法</strong>，我们一般会通过<strong>自定义配置</strong>这三个方法来<strong>自定义我们的安全访问策略。</strong></p><ul><li><p><strong>认证管理器配置方法</strong></p><p>AuthenticationManagerBuilder：身份验证管理生成器</p><p>void configure(AuthenticationManagerBuilder auth) 用来配置<strong>认证管理器</strong>AuthenticationManager。说白了就是所有 UserDetails 相关的它都管，包含 PasswordEncoder 密码等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 身份认证接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>核心过滤器配置方法</strong></p><blockquote><h2 id="WebSecurity：WEB安全"><a href="#WebSecurity：WEB安全" class="headerlink" title="WebSecurity：WEB安全"></a>WebSecurity：WEB安全</h2></blockquote><p>void configure(WebSecurity web) 用来配置 <strong>WebSecurity</strong> 。而 WebSecurity 是基于 Servlet Filter 用来配置 springSecurityFilterChain 。而 springSecurityFilterChain 又被委托给了 Spring Security 核心过滤器 Bean DelegatingFilterProxy。我们一般不会过多来自定义 WebSecurity , 使用较多的使其<strong>ignoring()</strong> 方法用来忽略 Spring Security 对静态资源的控制。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态资源设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity webSecurity)</span> &#123;</span><br><span class="line">    <span class="comment">//不拦截静态资源,所有用户均可访问的资源</span></span><br><span class="line">    webSecurity.ignoring().antMatchers(</span><br><span class="line">            <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/js/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/layui/**&quot;</span></span><br><span class="line">            );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>安全过滤器链配置方法</strong></p><blockquote><h2 id="HttpSecurity：HTTP请求安全处理"><a href="#HttpSecurity：HTTP请求安全处理" class="headerlink" title="HttpSecurity：HTTP请求安全处理"></a>HttpSecurity：HTTP请求安全处理</h2></blockquote><p>void configure(HttpSecurity http) 这个是我们使用最多的，用来配置 <strong>HttpSecurity</strong> 。 HttpSecurity 用于构建一个<strong>安全过滤器链</strong> SecurityFilterChain 。SecurityFilterChain 最终被注入核心过滤器 。 HttpSecurity 有许多我们需要的配置。我们可以通过它来进行自定义安全访问策略。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">    *UserService userService;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 链式编程</span></span><br><span class="line">    <span class="comment">// 授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 首页所有人可以访问,功能页只有对应有权限的人才能访问</span></span><br><span class="line">        <span class="comment">// 请求授权的规则</span></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">        formLogin() 自定义登陆页面</span></span><br><span class="line"><span class="comment">        loginPage(&quot;/login.html&quot;) 自定义登陆页面的路径</span></span><br><span class="line"><span class="comment">        loginProcessingUrl(&quot;/user/login&quot;) 点击登陆请求的地址</span></span><br><span class="line"><span class="comment">        defaultSuccessUrl(&quot;/test/index&quot;) 登陆成功之后，默认跳转地址</span></span><br><span class="line"><span class="comment">        permitAll() 无条件允许访问但是不校验权限</span></span><br><span class="line"><span class="comment">        authorizeRequests() 哪些不需要认证</span></span><br><span class="line"><span class="comment">        anyRequest().authenticated() 任何请求都必须经过身份验证</span></span><br><span class="line"><span class="comment">        csrf().disable() 关闭csrf防护,也就是关闭跨域保护</span></span><br><span class="line"><span class="comment">        .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admin,manager&quot;) 用户拥有指定的权限时才可以访问/test/index 路径 全匹配</span></span><br><span class="line"><span class="comment">        .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admin,manager&quot;) 满足一个就行 包含</span></span><br><span class="line"><span class="comment">        .antMatchers(&quot;/test/index&quot;).hasRole(&quot;sale&quot;) 角色全匹配才可以访问该路径 注意 ROLE_</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有权限默认会到登录页,需要开启登录页面</span></span><br><span class="line">        <span class="comment">// 定制登录页</span></span><br><span class="line">       http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止网站攻击:get,post</span></span><br><span class="line">        http.csrf().disable();<span class="comment">//关闭csrf功能</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注销,开启了注销功能,清除cookie和session</span></span><br><span class="line">        <span class="comment">// http.logout().deleteCookies(&quot;remove&quot;).invalidateHttpSession(true);</span></span><br><span class="line">        <span class="comment">// 注销后跳到首页</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启记住我功能,自定义接收前端的参数</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证, springboot2.1.x 可以直接使用</span></span><br><span class="line">    <span class="comment">// 密码编码:PasswordEncoder</span></span><br><span class="line">    <span class="comment">// 在Spring Security 5.0+ 新增了很多的加密方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 这些数据正常应该从数据库中读取</span></span><br><span class="line">        <span class="comment">// 现在的是从内存中设置账号用户名为：kuangshen，密码为123456，角色为vip2，vip3</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">                .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态资源设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity webSecurity)</span> &#123;</span><br><span class="line">        <span class="comment">//不拦截静态资源,所有用户均可访问的资源</span></span><br><span class="line">        webSecurity.ignoring().antMatchers(</span><br><span class="line">                <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/js/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/layui/**&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">*   public BCryptPasswordEncoder passwordEncoder() &#123;</span></span><br><span class="line"><span class="comment">*      // 设置默认的加密方式</span></span><br><span class="line"><span class="comment">*     return new BCryptPasswordEncoder();</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">*     public void configure(AuthenticationManagerBuilder builder) throws Exception &#123;</span></span><br><span class="line"><span class="comment">*     builder.userDetailsService(userService).passwordEncoder(passwordEncoder());</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="springBoot整合springSecurity"><a href="#springBoot整合springSecurity" class="headerlink" title="springBoot整合springSecurity"></a>springBoot整合springSecurity</h2><blockquote><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置yml文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security?useSSL=FALSE&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example.bdatabaserole.mapper:</span> <span class="string">debug</span>  <span class="comment"># 打印sql语句</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="创建实体类-用户、角色"><a href="#创建实体类-用户、角色" class="headerlink" title="创建实体类 用户、角色"></a>创建实体类 用户、角色</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 这个在第二个程序里不需要添加</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --=================================================================================================--</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer rid;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="创建DTO类"><a href="#创建DTO类" class="headerlink" title="创建DTO类"></a>创建DTO类</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="创建mapper层"><a href="#创建mapper层" class="headerlink" title="创建mapper层"></a>创建mapper层</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -- ==========================================================================================---</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    UserDTO <span class="title function_">selectUserByUsername</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="创建service层"><a href="#创建service层" class="headerlink" title="创建service层"></a>创建service层</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- ================================================================================================--</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> UserDTO <span class="title function_">getUser</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="创建Controller层"><a href="#创建Controller层" class="headerlink" title="创建Controller层"></a>创建Controller层</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get-user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --===================================================================================================--</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get-user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserDTO <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看登录用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get-auth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">getAuth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h2 id="要从数据库读取用户信息进行身份认证，需要新建类实现UserDetailService接口重写loadUserByUsername方法："><a href="#要从数据库读取用户信息进行身份认证，需要新建类实现UserDetailService接口重写loadUserByUsername方法：" class="headerlink" title="要从数据库读取用户信息进行身份认证，需要新建类实现UserDetailService接口重写loadUserByUsername方法："></a>要从数据库读取用户信息进行身份认证，需要新建类实现UserDetailService接口重写loadUserByUsername方法：</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需新建配置类注册一个指定的加密方式Bean，或在下一步Security配置类中注册指定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 通过用户名从数据库获取用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUser(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 得到用户角色</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> user.getRole();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 角色集合</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 角色必须以`ROLE_`开头，数据库中没有，则在这里加</span></span><br><span class="line">        authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span> + role));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">             <span class="comment">// 因为数据库是明文，所以这里需加密密码</span></span><br><span class="line">                passwordEncoder.encode(user.getPassword()),</span><br><span class="line">                authorities</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --=================================================================================================------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUser(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加用户拥有的多个角色</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Role&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">            grantedAuthorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span> + role.getRole()));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">             <span class="comment">// 数据库中密码没加密，需加密</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(user.getPassword()),</span><br><span class="line">                grantedAuthorities</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="创建security的配置类-WebSecurityConfig"><a href="#创建security的配置类-WebSecurityConfig" class="headerlink" title="创建security的配置类 WebSecurityConfig"></a>创建security的配置类 WebSecurityConfig</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="comment">// 开启方法级安全验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyUserDatailService userDatailService;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 使用BCrypt加密密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         auth</span><br><span class="line">                 <span class="comment">// 从数据库读取的用户进行身份认证</span></span><br><span class="line">                .userDetailsService(userDatailService)</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --===================================================================================================--</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyUserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"> &#125;        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth</span><br><span class="line">                .userDetailsService(userDatailService)</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面设置后，可以使用<strong>数据库中的用户名&#x2F;密码登录</strong>，还获取到了用户的角色。通过用户的角色，可以限制用户的请求访问：</p><p><strong>开启方法的访问权限</strong>，<strong>需要在WebSecurityConfig添加</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="comment">// 开启方法级安全验证</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="修改UserController-java类，增加方法的访问权限"><a href="#修改UserController-java类，增加方法的访问权限" class="headerlink" title="修改UserController.java类，增加方法的访问权限"></a>修改UserController.java类，增加方法的访问权限</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get-user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(username);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;user&#x27;)&quot;)</span> <span class="comment">// 只能user角色才能访问该方法</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user角色访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;)&quot;)</span> <span class="comment">// 只能admin角色才能访问该方法</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin角色访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="密码加密保存-UserMapper-java类中添加插入用户"><a href="#密码加密保存-UserMapper-java类中添加插入用户" class="headerlink" title="密码加密保存  UserMapper.java类中添加插入用户"></a>密码加密保存  UserMapper.java类中添加插入用户</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(username, password, role) value(#&#123;username&#125;, #&#123;password&#125;, #&#123;role&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="UserService-java类中添加插入方法，注意要加密密码"><a href="#UserService-java类中添加插入方法，注意要加密密码" class="headerlink" title="UserService.java类中添加插入方法，注意要加密密码"></a>UserService.java类中添加插入方法，注意要加密密码</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="comment">// 加密密码</span></span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        <span class="keyword">return</span> userMapper.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="修改HelloController-java，增加添加用户接口"><a href="#修改HelloController-java，增加添加用户接口" class="headerlink" title="修改HelloController.java，增加添加用户接口"></a>修改HelloController.java，增加添加用户接口</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add-user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="修改WebSecurityConfig配置类，重写configure-HttpSecurity-http-方法，配置允许注册用户的请求访问"><a href="#修改WebSecurityConfig配置类，重写configure-HttpSecurity-http-方法，配置允许注册用户的请求访问" class="headerlink" title="修改WebSecurityConfig配置类，重写configure(HttpSecurity http)方法，配置允许注册用户的请求访问"></a>修改WebSecurityConfig配置类，重写configure(HttpSecurity http)方法，配置允许注册用户的请求访问</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"> ...    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(HttpMethod.POST, <span class="string">&quot;/add-user&quot;</span>).permitAll() <span class="comment">// 允许post请求/add-user，而无需认证</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 所有请求都需要验证</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin() <span class="comment">// 使用默认的登录页面</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();<span class="comment">// post请求要关闭csrf验证,不然访问报错；实际开发中开启，需要前端配合传递其他参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="使用加密密码登录，需要修改CustomUserDetailsService类，之前从数据库拿到明文密码后需要加密，现在数据库里面的密码已经加密了，就不用加密了"><a href="#使用加密密码登录，需要修改CustomUserDetailsService类，之前从数据库拿到明文密码后需要加密，现在数据库里面的密码已经加密了，就不用加密了" class="headerlink" title="使用加密密码登录，需要修改CustomUserDetailsService类，之前从数据库拿到明文密码后需要加密，现在数据库里面的密码已经加密了，就不用加密了"></a>使用加密密码登录，需要修改CustomUserDetailsService类，之前从数据库拿到明文密码后需要加密，现在数据库里面的密码已经加密了，就不用加密了</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDatailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private PasswordEncoder passwordEncoder;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                <span class="comment">// 数据库密码已加密，不用再加密</span></span><br><span class="line">                user.getPassword(),</span><br><span class="line">                authorities</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="密码修改-UserMapper-java类中添加更新用户密码操作"><a href="#密码修改-UserMapper-java类中添加更新用户密码操作" class="headerlink" title="密码修改  UserMapper.java类中添加更新用户密码操作"></a>密码修改  UserMapper.java类中添加更新用户密码操作</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="meta">@Update(&quot;update user set password = #&#123;newPwd&#125; where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updatePwd</span><span class="params">(String username, String newPwd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123; </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updatePwd</span><span class="params">(String oldPwd, String newPwd)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前登录用户信息(注意：没有密码的)</span></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">principal</span> <span class="operator">=</span> (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> principal.getUsername();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过用户名获取到用户信息（获取密码）</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByUsername(username);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 判断输入的旧密码是正确</span></span><br><span class="line">        <span class="keyword">if</span> (passwordEncoder.matches(oldPwd, user.getPassword())) &#123;</span><br><span class="line">            <span class="comment">// 不要忘记加密新密码</span></span><br><span class="line">            <span class="keyword">return</span> userMapper.updatePwd(username, passwordEncoder.encode(newPwd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="controller层增加修改用户密码接口"><a href="#controller层增加修改用户密码接口" class="headerlink" title="controller层增加修改用户密码接口"></a>controller层增加修改用户密码接口</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updatePwd&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updatePwd</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updatePwd(map.get(<span class="string">&quot;oldPwd&quot;</span>), map.get(<span class="string">&quot;newPwd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springboot-springSecurity-mybatisPlus"><a href="#springboot-springSecurity-mybatisPlus" class="headerlink" title="springboot + springSecurity+mybatisPlus"></a>springboot + springSecurity+mybatisPlus</h2><p>可以参考 ： <a href="https://blog.csdn.net/weixin_43876438/article/details/107856583">SpringSecurity实现登录注册_HU芦娃的博客-CSDN博客_springsecurity注册</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><blockquote><p>抽象工厂模式是一种 <strong>创建型设计模式</strong>，它能创建一系列相关的对象，<strong>而无需指定其具体类</strong></p></blockquote><ul><li>图例：</li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/abstract-factory/abstract-factory-zh.png" alt="抽象工厂模式"></p><ul><li><p>详解：</p><ul><li><p>抽象工厂模式建议为系列中的每件产品明确声明接口 （例如椅子、 沙发或咖啡桌）。 然后， 确保所有产品变体都继承这些接口。 例如， <strong>所有风格的椅子</strong>都实现<strong>椅子</strong>接口； 所有**风格的咖啡桌都实现 <code>咖啡桌</code>**接口， 以此类推。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/solution1.png" alt="椅子类的层次结构"></p></li><li><p>接下来，我们需要声明抽象工厂所包含产品构造方法的接口，例如 $\color{Orange}{create­Chair创建椅子} $ ，$\color{Blue}{create­Sofa创建沙发} $ 和 $\color{RedOrange}{create­Coffee­Table创建咖啡桌} $</p></li></ul><p>这些方法必须返回<strong>抽象</strong>产品类型，即我们之前抽取的那些接口：  椅子，沙发和 咖啡桌等等。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/solution2.png" alt="工厂类的层次结构"></p><ul><li>对于那些产品变体情况下，我们都将基于 <code>抽象工厂</code>接口创建不同的工厂类。 每个工厂类都只能返回特定类别的产品， 例如，$\color{Orange}{create­Chair创建椅子} $**Modern­Furniture­Factory **只能创建 现代椅子Modern­Chair 、现代沙发Modern­Sofa、和现代咖啡桌Modern­Coffee­Table对象</li></ul></li><li><p>抽象工厂模式示意图</p><p><img src="https://img2018.cnblogs.com/blog/1479152/201904/1479152-20190425184143964-144789045.png" alt="img"></p></li><li><p>代码实现：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaApple</span> <span class="keyword">extends</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中国的苹果...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FruitFactory</span> &#123;</span><br><span class="line">    <span class="comment">//实例化苹果</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getApple</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//实例化香蕉</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getBanana</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaFactory</span> <span class="keyword">implements</span> <span class="title class_">FruitFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getApple</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChinaApple</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getBanana</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChinaBanana</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建中国工厂</span></span><br><span class="line">        <span class="type">FruitFactory</span> <span class="variable">chinaFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChinaFactory</span>();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国苹果实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> chinaFactory.getApple();</span><br><span class="line">        apple.get();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国香蕉实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> chinaFactory.getBanana();</span><br><span class="line">        banana.get();        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建英国工厂</span></span><br><span class="line">        <span class="type">FruitFactory</span> <span class="variable">englandFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnglandFactory</span>();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国苹果实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">apple1</span> <span class="operator">=</span> englandFactory.getApple();</span><br><span class="line">        apple1.get();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国香蕉实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">banana2</span> <span class="operator">=</span> englandFactory.getBanana();</span><br><span class="line">        banana2.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1479152/201904/1479152-20190425184505372-571982803.png" alt="img"></p><blockquote><h2 id="抽象工厂模式适合应用场景"><a href="#抽象工厂模式适合应用场景" class="headerlink" title="抽象工厂模式适合应用场景"></a>抽象工厂模式适合应用场景</h2></blockquote><p>如果代码需要与$\color{Blue}{多个不同系列} $ 的相关产品<strong>交互</strong>，但是由于无法提前获取相关信息，或者处于对未来扩展性的考虑，你不希望代码基于产品的具体类进行构建，在这种情况下，你可以使用 <strong>抽象工厂</strong></p><blockquote><h2 id="抽象工厂模式优缺点"><a href="#抽象工厂模式优缺点" class="headerlink" title="抽象工厂模式优缺点"></a>抽象工厂模式优缺点</h2></blockquote><p>优点：</p><ul><li>你可以确保同一工厂生成的产品相互匹配。</li><li>你可以避免客户端和具体产品代码的耦合。</li><li><em>单一职责原则</em>。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</li><li><em>开闭原则</em>。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</li></ul><p>缺点：</p><p> 由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><blockquote><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p></blockquote><ul><li><p>图列</p><p><img src="https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png" alt="工厂方法模式"></p></li><li><p>问题：</p></li></ul><p>假设你正在开发一款物流管理应用。 最初版本只能处理卡车运输， 因此大部分代码<strong>都在位于</strong>名为卡车的类中。</p><p>如果代码其余部分与现有类已经存在$\color{Mahogany}{耦合关系} $， 那么向程序中<strong>添加新类</strong>其实并没有那么容易。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/problem1-zh.png" alt="在程序中新增一个运输类会遇到问题"></p><ul><li>解决方案：</li></ul><p>工厂方法模式建议使用<strong>特殊的<em>工厂</em>方法</strong>代替对于对象构造函数的直接调用 （即使用 <code>new</code>运算符）。不用担心， 对象仍将通过 <code>new</code>运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/solution1.png" alt="创建者类结构"></p><div align="center">子类可以修改工厂方法返回的对象类型。</div><ul><li><p>详解：</p><p>$\color{Mahogany}{卡车Truck}$和$\color{BrickRed}{轮船Ship类}$ <strong>都必须实现</strong>$\color{OrangeRed}{运输Transport接口}$，该接口<strong>声明</strong>了一个<strong>名</strong>为 $\color{OrangeRed}{deliver交付的方法}$。 每个类都将以不同的方式实现该方法： 卡车走陆路交付货物， 轮船走海路交付货物。 陆路运输Road­Logistics类中的工厂方法返回卡车对象，而海路运输Sea­Logistics类则返回轮船对象。</p></li></ul><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/solution3-zh.png" alt="使用工厂方法模式后的代码结构"></p><div align="center">只要产品类实现一个共同的接口， 你就可以将其对象传递给客户代码， 而无需提供额外数据</div><ul><li><p>结构</p><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220515201231402.png" alt="image-20220515201231402"></p></li><li><p>代码实现：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//雷锋 （1）抽象产品角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LeiFeng</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Sweep</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Wash</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuyRice</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//社区志愿者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Volunteer</span> <span class="keyword">extends</span> <span class="title class_">LeiFeng</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Sweep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;社区志愿者帮忙打扫   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Wash</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;社区志愿者帮忙洗衣服   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuyRice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;社区志愿者帮忙买米   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//大学生  （2）具体产品角色：</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Undergraduate</span> <span class="keyword">extends</span> <span class="title class_">LeiFeng</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Sweep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;大学生帮忙打扫   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Wash</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;大学生帮忙洗衣服   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuyRice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;大学生帮忙买米   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//雷锋工厂  （3）抽象工厂角色：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">LeiFeng <span class="title function_">CreateLeiFeng</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//社区志愿者工厂  （4）具体工厂角色：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolunteerFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> LeiFeng <span class="title function_">CreateLeiFeng</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Volunteer</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//学雷锋的大学生工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UndergraduateFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> LeiFeng <span class="title function_">CreateLeiFeng</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Undergraduate</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> <span class="comment">// 客户端测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//要换成&#x27;社区志愿者&#x27;，修改这里就可以</span></span><br><span class="line"><span class="type">IFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndergraduateFactory</span>();</span><br><span class="line"><span class="type">LeiFeng</span> <span class="variable">student</span> <span class="operator">=</span> factory.CreateLeiFeng();</span><br><span class="line"></span><br><span class="line">student.Sweep();</span><br><span class="line">student.Wash();</span><br><span class="line">student.BuyRice();</span><br><span class="line">System.out.println(<span class="string">&quot;\n --------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">IFactory</span> <span class="variable">factory2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolunteerFactory</span>();</span><br><span class="line"><span class="type">LeiFeng</span> <span class="variable">volunteer</span> <span class="operator">=</span> factory2.CreateLeiFeng();</span><br><span class="line"></span><br><span class="line">volunteer.Sweep();</span><br><span class="line">volunteer.Wash();</span><br><span class="line">volunteer.BuyRice();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180528135401854?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTg4NjMw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><blockquote><h2 id="工厂方法模式适合应用场景"><a href="#工厂方法模式适合应用场景" class="headerlink" title="工厂方法模式适合应用场景"></a>工厂方法模式适合应用场景</h2></blockquote><p>当你在编写代码的过程中，如果$\color{Red}{无法预知对象确切类别及其依赖关系}$时，可使用工厂方法</p><p>例如， 如果需要向应用中<strong>添加一种新产品，</strong> 你只需要开发新的创建者子类， 然后重写其工厂方法即可。</p><blockquote><h2 id="工厂方法模式优缺点"><a href="#工厂方法模式优缺点" class="headerlink" title="工厂方法模式优缺点"></a>工厂方法模式优缺点</h2></blockquote><p>优点:</p><ul><li>你可以避免创建者和具体产品之间的紧密耦合。</li><li><em>单一职责原则</em>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</li><li><em>开闭原则</em>。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</li></ul><p>缺点：</p><p>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</p><h2 id="生成器模式"><a href="#生成器模式" class="headerlink" title="生成器模式"></a>生成器模式</h2><blockquote><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p></blockquote><ul><li>图例：</li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/builder/builder-zh.png" alt="生成器设计模式"></p><ul><li><p>详解：</p><ul><li><p>该模式会将$\color{Red}{对象构造过程划分为一组}$步骤， 比如 $\color{Mahogany}{build­Walls创建墙壁}$和$\color{Mahogany}{ build­Door创建房门}$等。 每次创建对象时， 你都需要通过<strong>生成器对象</strong>执行一系列步骤。 <strong>重点</strong>在于你无需调用所有步骤， 而<strong>只需</strong>调用<strong>创建特定对象配置所需</strong>的那些步骤即可。</p></li><li><p>当你需要$\color{Red}{创建不同形式的产品}$时， 其中的一些构造步骤<strong>可能需要不同的实现</strong>。 例如， 木屋的房门可能需要使用木头制造， 而城堡的房门则必须使用石头制造。</p><p>在这种情况下， 你可以$\color{Red}{创建多个不同的生成器}$， $\color{YellowOrange}{用不同方式实现一组相同的创建步骤}$。 然后你就可以在创建过程中使用这些生成器 （例如按顺序调用多个构造步骤） 来生成不同类型的对象。</p></li></ul></li></ul><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/builder-comic-1-zh.png"></p><ul><li>例如， 假设<strong>第一个建造者</strong>使用木头和玻璃制造房屋， <strong>第二个建造者</strong>使用石头和钢铁， 而<strong>第三个建造者</strong>使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是，只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。<ul><li>你可以进一步将用于<strong>创建产品的一系列生成器步骤调用抽取</strong>成为 $\color{Mahogany}{单独的主管类}$。 主管类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</li></ul></li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/builder/builder-comic-2-zh.png" alt="img"></p><ul><li>生成器模式结构</li></ul><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220515205018669.png" alt="image-20220515205018669"></p><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder.java</span></span><br><span class="line"><span class="comment"> *  建造者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">//地基</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidA</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//钢筋工程</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidB</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//铺电线</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidC</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//粉刷</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidD</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//完工-获取产品</span></span><br><span class="line">    <span class="keyword">abstract</span> Product <span class="title function_">getProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product.java</span></span><br><span class="line"><span class="comment"> *  产品（房子）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String buildA;</span><br><span class="line">    <span class="keyword">private</span> String buildB;</span><br><span class="line">    <span class="keyword">private</span> String buildC;</span><br><span class="line">    <span class="keyword">private</span> String buildD;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildA</span><span class="params">(String buildA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildA = buildA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildB</span><span class="params">(String buildB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildB = buildB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildC</span><span class="params">(String buildC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildC = buildC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildD</span><span class="params">(String buildD)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildD = buildD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> buildA+<span class="string">&quot;\n&quot;</span>+buildB+<span class="string">&quot;\n&quot;</span>+buildC+<span class="string">&quot;\n&quot;</span>+buildD+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;房子验收完成&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcreteBuilder.java</span></span><br><span class="line"><span class="comment"> *  具体建造者(工人)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        product = <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidA</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildA(<span class="string">&quot;地基&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidB</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildB(<span class="string">&quot;钢筋工程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidC</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildC(<span class="string">&quot;铺电线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidD</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildD(<span class="string">&quot;粉刷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Product <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Director.java</span></span><br><span class="line"><span class="comment"> *  指挥者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="comment">//指挥工人按顺序造房</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">create</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        builder.bulidA();</span><br><span class="line">        builder.bulidB();</span><br><span class="line">        builder.bulidC();</span><br><span class="line">        builder.bulidD();</span><br><span class="line">        <span class="keyword">return</span> builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test.java</span></span><br><span class="line"><span class="comment"> *  测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">create</span> <span class="operator">=</span> director.create(<span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>());</span><br><span class="line">        System.out.println(create.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/webp" alt="img"></p><blockquote><h2 id="生成器模式适合应用模式"><a href="#生成器模式适合应用模式" class="headerlink" title="生成器模式适合应用模式"></a>生成器模式适合应用模式</h2></blockquote><ul><li>使用生成器模式可避免<strong>“重叠构造函数”</strong>的出现</li><li>当你希望使用代码$\color{Peach}{创建不同形式的产品}$（例如石头或木头房屋）时，可使用生成器模式</li><li>使用生成器$\color{Peach}{构造组合树}$或其$\color{Peach}{他复杂对象}$</li></ul><blockquote><h2 id="生成器模式优缺点"><a href="#生成器模式优缺点" class="headerlink" title="生成器模式优缺点"></a>生成器模式优缺点</h2></blockquote><p>优点：</p><ul><li>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</li><li>生成不同形式的产品时， 你可以复用相同的制造代码。</li><li><em>单一职责原则</em>。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</li></ul><p>缺点：</p><p>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote><p><strong>原型模式</strong>是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p></blockquote><ul><li>图例：</li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/prototype/prototype.png" alt="原型设计模式"></p><ul><li><p>详解：</p><p>如果你有一个对象， 并希望生成与其完全相同的一个复制品， 你该如何实现呢？ 首先， 你必须新建一个属于相同类的对象。 然后，你必须遍历原始对象的所有成员变量， 并将成员变量值复制到新对象中。</p><p>不错！ 但有个小问题。 并非所有对象都能通过这种方式进行复制， 因为有些对象$\color{Red}{可能拥有私有成员变量}$， <strong>它们在对象本身以外是不可见的</strong>。</p></li></ul><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/prototype-comic-1-zh.png"></p><ul><li><p>原型模式$\color{Red}{将克隆过程委派}$给<strong>被克隆</strong>的<strong>实际对象</strong>。 模式为所有支持克隆的对象声明了一个$\color{Melon}{通用接口}$，<strong>该接口让你能够克隆对象</strong>， 同时$\color{Red}{又无需将代码和对象所属类耦合}$。 通常情况下， 这样的接口中<strong>仅包含一个</strong> 克隆方法。</p><p>所有的类对克隆方法的实现都非常相似。 该方法会创建一个当前类的对象， 然后将原始对象所有的成员变量值复制到新建的类中。 你甚至可以复制私有成员变量， 因为绝大部分编程语言都允许对象访问其同类对象的私有成员变量。</p></li><li><p>其运作方式如下： $\color{Blue}{创建一系列不同类型的对象}$并<strong>不同的方式</strong>对其进行配置。 如果$\color{RubineRed}{所需对象与预先配置的对象}$<strong>相同</strong>， 那么你<strong>只需克隆原型</strong>即可， 无需新建一个对象。</p></li><li><p>原型模式结构</p></li></ul><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220515212052687.png" alt="image-20220515212052687"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象原型角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prototype</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆自身的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个从自身克隆出来的对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Prototype <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *具体原型角色</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteProtype1</span> <span class="keyword">extends</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteProtype1</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype1</span>(<span class="built_in">this</span>.getId());</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteProtype2</span> <span class="keyword">extends</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteProtype2</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype2</span>(<span class="built_in">this</span>.getId());</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 客户端</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteProtype1</span> <span class="variable">protype1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype1</span>(<span class="string">&quot;Protype1&quot;</span>);</span><br><span class="line">        <span class="type">ConcreteProtype1</span> <span class="variable">protypeCopy1</span> <span class="operator">=</span> (ConcreteProtype1)protype1.clone();</span><br><span class="line">        System.out.println(protypeCopy1.getId());</span><br><span class="line">        System.err.println(protype1.toString());</span><br><span class="line">        System.err.println(protypeCopy1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">ConcreteProtype2</span> <span class="variable">protype2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype2</span>(<span class="string">&quot;Protype2&quot;</span>);</span><br><span class="line">        <span class="type">ConcreteProtype2</span> <span class="variable">protypeCopy2</span> <span class="operator">=</span> (ConcreteProtype2)protype2.clone();</span><br><span class="line">        System.out.println(protypeCopy2.getId());</span><br><span class="line">        System.err.println(protype2.toString());</span><br><span class="line">        System.err.println(protypeCopy2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  输出的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Protype1</span><br><span class="line">com.sschen.prototype.ConcreteProtype1@2a139a55</span><br><span class="line">com.sschen.prototype.ConcreteProtype1@15db9742</span><br><span class="line">Protype2</span><br><span class="line">com.sschen.prototype.ConcreteProtype2@6d06d69c</span><br><span class="line">com.sschen.prototype.ConcreteProtype2@<span class="number">7852e922</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="原型模式适合应用场景"><a href="#原型模式适合应用场景" class="headerlink" title="原型模式适合应用场景"></a>原型模式适合应用场景</h2></blockquote><ul><li>如果$\color{Blue}{你需要复制一些对象}$，同时又希望$\color{Blue}{代码独立于这些对象所属的具体类}$，可以使用原型模式</li><li>如果$\color{RubineRed}{子类的区别仅在于其他对象的初始化方式}$，那么你可以使用该模式<strong>来减少子类的数量</strong>，别人创建这些子类的目的<strong>可能为了创建特定类型的对象</strong>。</li></ul><blockquote><h2 id="原型模式的优缺点"><a href="#原型模式的优缺点" class="headerlink" title="原型模式的优缺点"></a>原型模式的优缺点</h2></blockquote><p>优点：</p><ul><li>你可以克隆对象， 而无需与它们所属的具体类相耦合。</li><li>你可以克隆预生成原型， 避免反复运行初始化代码。</li><li>你可以更方便地生成复杂对象。</li><li>你可以用继承以外的方式来处理复杂对象的不同配置。</li></ul><p>缺点：</p><p> 克隆包含循环引用的复杂对象可能会非常麻烦。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p></blockquote><ul><li><p>图例：</p><p><img src="https://refactoringguru.cn/images/patterns/content/singleton/singleton.png?id=108a0b9b5ea5c4426e0afa4504491d6f" alt="单例模式"></p></li><li><p>详解：</p><p><strong>保证一个类只有一个实例</strong>。 为什么会有人想要控制一个类所拥有的实例数量？ 最常见的原因是控制某些共享资源 （例如数据库或文件） 的访问权限</p><ul><li>运作方式是这样的：如果你创建了一个对象， 同时过一会儿后$\color{Blue}{你决定再创建一个新对象}$， 此时你会获得<strong>之前已创建的对象</strong>，$\color{RubineRed}{而不是一个新对象。}$</li></ul></li><li><p>单例模式结构</p></li></ul><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220515214536764.png" alt="image-20220515214536764"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleObject</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      <span class="type">SingleObject</span> <span class="variable">object</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  输出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式之-—-gt-gt-gt-懒汉式，线程不安全"><a href="#单例模式之-—-gt-gt-gt-懒汉式，线程不安全" class="headerlink" title="单例模式之 —-&gt;&gt;&gt; 懒汉式，线程不安全"></a>单例模式之 —-&gt;&gt;&gt; 懒汉式，线程不安全</h2></blockquote><p>这种方式是<strong>最基本的实现方式</strong>，这种实现最大的问题$\color{RubineRed}{就是不支持多线程}$。因为<strong>没有加锁</strong>$\color{Red}{synchronized}$，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式之-—-gt-gt-gt-懒汉式，线程安全"><a href="#单例模式之-—-gt-gt-gt-懒汉式，线程安全" class="headerlink" title="单例模式之 —-&gt;&gt;&gt; 懒汉式，线程安全"></a>单例模式之 —-&gt;&gt;&gt; 懒汉式，线程安全</h2></blockquote><p>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，<strong>效率很低</strong>，99% 情况下不需要同步</p><ul><li>优点：第一次调用才初始化，避免内存浪费。</li><li>缺点：$\color{Red}{必须加锁synchronized}$才能<strong>保证单例</strong>，但加锁会影响效率。getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）</li></ul><blockquote><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式之-—-gt-gt-gt-饿汉式"><a href="#单例模式之-—-gt-gt-gt-饿汉式" class="headerlink" title="单例模式之 —-&gt;&gt;&gt;饿汉式"></a>单例模式之 —-&gt;&gt;&gt;饿汉式</h2></blockquote><p>这种方式比较常用，但容易产生垃圾对象。</p><ul><li>优点：没有加锁，执行效率会提高。</li><li>缺点：类加载时就初始化，浪费内存。</li></ul><blockquote><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式适合应用场景"><a href="#单例模式适合应用场景" class="headerlink" title="单例模式适合应用场景"></a>单例模式适合应用场景</h2></blockquote><ul><li>如果程序中的<strong>某个类</strong>对于**所有客服端$\color{Red}{只有一个可用的实例}$**，可以使用单例模式</li><li>如果你需要**更加严格地$\color{Red}{控制全局变量}$**，可以使用单例模式</li></ul><blockquote><h2 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h2></blockquote><p>优点：</p><ul><li>你可以保证一个类只有一个实例。</li><li>你获得了一个指向该实例的<strong>全局访问节点</strong>。</li><li>仅在首次请求单例对象时对其进行初始化。</li></ul><p>缺点：</p><ul><li>违反了单一职责原则。 该模式同时解决了两个问题。</li><li>单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</li><li>该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</li><li>单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li></ul><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p> <strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p></blockquote><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter-zh.png" alt="adapter-zh"></p><ul><li><p>详解：<br>适配器模式通过$\color{Red}{封装对象}$将<strong>复杂</strong>的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。</p></li><li><p>运作方式：</p><ul><li>适配器实现与其中一个现有对象兼容的接口。</li><li>现有对象可以使用该接口安全地调用适配器方法。</li><li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li></ul></li><li><p>遇到的问题：</p></li></ul><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p><p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库<strong>只兼容 JSON 格式的数据。</strong></p><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/problem-zh.png" alt="problem-zh"></p><ul><li><p>解决方案：</p><p>为了解决数据格式不兼容的问题， 你可以为分析函数库中的每个类创建将 <strong>XML 转换为 JSON 格式的适配器</strong>， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其$\color{Red}{传递给被封装分析对象的相应方法}$。</p></li><li><p>结构</p><p><strong>对象适配器：</strong></p><p>实现时使用了构成原则： 适配器实现了其中一个对象的接口， 并对另一个对象进行封装。 所有流行的编程语言都可以实现适配器。</p><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220522091742582.png" alt="image-20220522091742582"></p></li></ul><p><strong>类适配器</strong></p><p>这一实现使用了继承机制： 适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。</p><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220522092000815.png" alt="image-20220522092000815"></p><ul><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  适配器模式的意图是将一个已存在的类/接口进行复用,将其转换/具体化成客户希望的另外的一个类/接口。</span></span><br><span class="line"><span class="comment"> *  如何实例复用：</span></span><br><span class="line"><span class="comment"> *  将要进行复用的类，放到目标类的构造方法中，进行实例化，然后在目标类的相应方法中，进行调用，修改原来方法</span></span><br><span class="line"><span class="comment"> *  中的参数，或添加相应的逻辑。即复用了已有类的原来方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个电源适配器</span></span><br><span class="line">        <span class="type">VoltageAdapter</span> <span class="variable">voltageAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoltageAdapter</span>();</span><br><span class="line">        <span class="comment">//创建一个手机</span></span><br><span class="line">        <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mobile</span>(voltageAdapter);</span><br><span class="line">        <span class="comment">//充电</span></span><br><span class="line">        mobile.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个手机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mobile</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> V=<span class="number">220</span>; <span class="comment">//定义接入手机的电压为220伏</span></span><br><span class="line">    <span class="comment">//需要进入电源适配器 否则手机就炸了</span></span><br><span class="line">    <span class="keyword">private</span> VoltageAdapter voltageAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mobile</span><span class="params">(VoltageAdapter voltageAdapter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.voltageAdapter = voltageAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//手机充电</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用适配器方法以替换手机的充电方法</span></span><br><span class="line">        voltageAdapter.StepDownCharge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电源适配器 --降压</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VoltageAdapter</span>&#123;</span><br><span class="line">    <span class="comment">//降压充电 --额定充电</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">StepDownCharge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备充电...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;原始电压：&quot;</span> + Mobile.V + <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;经过变压器转换之后的电压:&quot;</span> + (Mobile.V - <span class="number">200</span>) + <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;快速充电中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1394344-20181110172335244-524887957.png" alt="1394344-20181110172335244-524887957"></p></li></ul><blockquote><h2 id="适配器模式适合应用场景"><a href="#适配器模式适合应用场景" class="headerlink" title="适配器模式适合应用场景"></a>适配器模式适合应用场景</h2></blockquote><ul><li><p>当你希望使用某个类，但是$\color{Red}{其接口与其他代码不兼容时}$，可以使用适配器类</p></li><li><p>如果你需要$\color{Red}{复用这样一些类}$，他们<strong>处于同一个继承体系，</strong>并且他们又有了额外的<strong>一些共同方法</strong>，但是这些共同</p><p>方法不是所有在这一继承体系中的子类所具有的共性</p></li></ul><blockquote><h2 id="适配器模式优缺点"><a href="#适配器模式优缺点" class="headerlink" title="适配器模式优缺点"></a>适配器模式优缺点</h2></blockquote><p>优点：</p><ul><li>_单一职责原则_你可以将接口或数据转换代码从程序主要业务逻辑中分离。</li><li><em>开闭原则</em>。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</li></ul><p>缺点：</p><p>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</p><h2 id="适配器设计模式（封装器模式）-refactoringguru-cn"><a href="#适配器设计模式（封装器模式）-refactoringguru-cn" class="headerlink" title="适配器设计模式（封装器模式） (refactoringguru.cn)"></a><a href="https://refactoringguru.cn/design-patterns/adapter">适配器设计模式（封装器模式） (refactoringguru.cn)</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>环境变量的配置</title>
      <link href="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h1><h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><ol><li><p>从官网下载 <strong>JDK1.8</strong> 版本的（注意，JDK版本不能太高，IDEA运行不起来） <a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a></p></li><li><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427170724531.png" alt="image-20220427170724531"><strong>在桌面选择此电脑，右键点击选择属性，选择高级系统设置</strong> 选择编辑环境变量</p></li><li><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427171204637.png" alt="image-20220427171204637"></p><p>设置变量名为：<strong>JAVA_HOME</strong>  变量值为：“你安装的JDK路径”</p></li><li><p>编辑PATH 点击新建，输入  **%JAVA_HOME%\bin ** <strong>%JAVA_HOME%\jre\bin</strong></p></li></ol><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427171753490.png" alt="image-20220427171753490"></p><p>5.测试 win+R 输入 <strong>cmd</strong>  输入 <strong>java</strong><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427171910684.png" alt="image-20220427171910684"></p><p><strong>javac</strong><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427171938343.png" alt="image-20220427171938343"></p><p><strong>java -version</strong></p><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427172007082.png" alt="image-20220427172007082"></p><p>配置成功</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ol><li>官网下载mysql <a href="https://www.mysql.com/">MySQL</a>  下载5.17的</li><li>打开环境变量，新建 <strong>MYSQL_HOME</strong> <strong>变量名</strong>  “mysql的安装路径” <strong>变量值</strong><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427191251233.png" alt="image-20220427191251233"></li></ol><p>3.编辑 path 新建  <strong>%MYSQL_HOME%\bin</strong> <img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427191406958.png" alt="image-20220427191406958"></p><p>4.<strong>新建my.ini文件</strong></p><ul><li>在你的<strong>mysql目录</strong>下<strong>新建 my.ini文件</strong></li><li>具体步骤：找到 MySQL解压的目录 → 新建文本文档 my.txt  → 输入以下内容 →  ctrl+s进行保存</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录 这块换成自己解压的路径</span><br><span class="line">basedir=D:\\mysql\\mysql-5.7.13-winx64</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p>5.以<strong>管理员身份</strong>进入 mysql目录下</p><ul><li><p><strong>输入<code>mysqld --initialize</code></strong>  此时，应该没有任何反应  mysqld –initialize 会帮助你创建data文件夹并初始化mysql, 因此<strong>不要</strong>自己创建data文件夹</p></li><li><p><strong>接着输入<code>mysqld -install </code></strong>  若出现Service successfully installed，证明安装成功  <strong>如</strong>出现<strong>Install of the Service Denied</strong>，则说明<strong>没有以管理员权限来运行cmd</strong></p></li><li><p><strong>再输入启动命令：<code>net start mysql</code></strong></p><p><img src="https://img-blog.csdnimg.cn/20200804210712347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTMzNzEx,size_16,color_FFFFFF,t_70" alt="img"></p></li></ul><p>6.修改密码  由于初始化产生的随机密码太复杂，不便于我们登录mysql，因此，我们应当修改一个自己能记住的密码！</p><ul><li><p><strong>首先停止MySQL服务,输入命令行<code>net stop mysql</code></strong> </p><p><img src="https://img-blog.csdnimg.cn/20200804211951813.png" alt="img"></p></li><li><p><strong>跳过密码登录</strong>  找到  <strong>my.ini文件 <strong>并打开  添加字段 在</strong>[mysqld]<strong>字段下任意一行添加 <strong>skip-grant-tables</strong>  （</strong>这一步可以省略</strong>）</p><p><img src="https://img-blog.csdnimg.cn/20200804213510212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTMzNzEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>打开cmd，输入<strong>net start mysql</strong>，启动mysql；启动成功之后设置密码(<strong>初始密码 —&gt; 一般是位空的</strong>)  输入命令  <strong>mysqladmin -u root -p password</strong> </p><ul><li>出现“<strong>Enter password：</strong>”，刚安装完时是默认没有密码的，直接回车即可</li><li>接着出现“<strong>New password：</strong>”输入新的密码，回车即可，</li><li>接着出现“<strong>Confirm new password:”</strong>确认密码，回车即可。</li></ul></li><li><p>或者 输入 <strong>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</strong></p></li></ul><ol start="7"><li><strong>检查 ：修改密码完之后 在控制台 登录</strong>   输入命令  <strong>mysql -u root -p</strong></li></ol><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>1.去官网下载 maven  3.8.5的版本</p><p>2.在maven目录下 新建文件夹  <strong>maven-repository</strong></p><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427194203399.png" alt="image-20220427194203399"></p><ol start="3"><li>打开 conf 里面的 <strong>settings.xml</strong>文件 在 <strong>55行</strong> 添加  <localRepository>L:\environment\apache-maven-3.8.5\maven-repository</localRepository>  添加的是 刚才创建的文件夹 <strong>maven-repository 目录</strong></li></ol><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427194510707.png" alt="image-20220427194510707"></p><ol start="4"><li>配置<strong>远程仓库</strong>  在 <strong>160行 添加 阿里云仓库</strong></li></ol><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427194656700.png" alt="image-20220427194656700"></p><ol start="5"><li><p><strong>配置环境变量</strong> </p><ul><li><p>新建 <strong>变量名</strong>为 <strong>M2_HOME</strong>  <strong>变量值</strong>：<strong>maven的bin目录</strong></p></li><li><p>新建 <strong>变量名</strong> 为 <strong>MAVEN_HOME</strong>  <strong>变量值</strong>：<strong>maven 的目录</strong></p><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427195049691.png" alt="image-20220427195049691"></p></li></ul></li><li><p>编辑 path 变量 新建 <strong>%MAVEN_HOME%\bin</strong></p><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427195147035.png" alt="image-20220427195147035"></p></li></ol><p>7.测试maven <strong>cmd</strong> 输入 <strong>mvn -version</strong></p><p><img src="/2020/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/image-20220427195316067.png" alt="image-20220427195316067"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
