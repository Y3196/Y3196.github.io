<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/05/22/%E7%88%AC%E8%99%AB/"/>
      <url>/2022/05/22/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="x3D-x3D-ElasticSerach-与-MySQL-区别-x3D-x3D"><a href="#x3D-x3D-ElasticSerach-与-MySQL-区别-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;ElasticSerach 与 MySQL 区别&#x3D;&#x3D;"></a>&#x3D;&#x3D;ElasticSerach 与 MySQL 区别&#x3D;&#x3D;</h1><blockquote><p>MySQL作为数据库的核心能力范围就是在线业务的事务处理和查询访问。 因此无论单体应用也好，微服务也好，都会以多连接请求的形式，将业务数据写入MySQL；作为专业的 <strong>Elasticsearch</strong>，往往在整个过程中，&#x3D;&#x3D;扮演着从MySQL复制数据、建立索引、提供搜索的角色&#x3D;&#x3D;。 这是最普遍存在的一种应用场景。</p></blockquote><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><blockquote><p>第一步 导包！！！</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第二步 创建 HtmlParseUtil 解析 爬取数据</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/// 使用前需要联网</span></span><br><span class="line"><span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=java&quot;</span>;</span><br><span class="line"><span class="comment">// 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line"><span class="comment">// 使用document可以使用在js对document的所有操作</span></span><br><span class="line"><span class="comment">// 2.获取元素（通过id）</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">j_goodsList</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line"><span class="comment">// 3.获取J_goodsList ul 每一个 li</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// 4.获取li下的 img、price、name</span></span><br><span class="line">        <span class="keyword">for</span> (Element li : lis) &#123;</span><br><span class="line">            <span class="comment">// 因为图片太多 如果用src进行加载图片的话 会没有结果，因为会先进行懒加载 将 src 改成  data-lazy-img</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> li.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);<span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;img : &quot;</span> + img);</span><br><span class="line">            System.out.println(<span class="string">&quot;name : &quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;price : &quot;</span> + price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**1.**其中 url 是<img src="/2022/05/22/%E7%88%AC%E8%99%AB/Typora\typora-user-images\image-20220504162404839.png" alt="image-20220504162404839"></p><p>使用 JS 语句进行解析 <strong>J_goodsList</strong>   &#x3D;&#x3D;div 有 id 所以 通过 Id 进行查询  getElementById&#x3D;&#x3D;</p><p><img src="/2022/05/22/%E7%88%AC%E8%99%AB/Typora\typora-user-images\image-20220504162739257.png" alt="image-20220504162739257"></p><p><strong>2.获取div下“每一本书” 即 每一条数据</strong>  &#x3D;&#x3D;li标签&#x3D;&#x3D;  因为没有id值 只能通过目标查询 &#x3D;&#x3D;.getElementsByTag&#x3D;&#x3D;</p><p><img src="/2022/05/22/%E7%88%AC%E8%99%AB/Typora\typora-user-images\image-20220504163029480.png" alt="image-20220504163029480"></p><p><strong>3.</strong> 获取 **li 下的 价格 图片 名字 等数据 ** 通过 for 循环 &#x3D;&#x3D;遍历 li 标签！！！&#x3D;&#x3D; </p><p> <img src="/2022/05/22/%E7%88%AC%E8%99%AB/Users\yuxua\AppData\Roaming\Typora\typora-user-images\image-20220504163548695.png" alt="image-20220504163548695"></p><blockquote><p>因为 数据多的情况下，加载图片的时候，会先进行&#x3D;&#x3D;懒加载&#x3D;&#x3D; 获取图片时 不能直接 src</p></blockquote><p><strong>4.</strong> 故进行获取图片的时候 要先将 &#x3D;&#x3D;src 换成 data-lazy-img&#x3D;&#x3D;</p><p><strong>5.</strong> 封装为方法 与实体类结果使用  &#x3D;&#x3D;要将获取的li标签下的div的值 封装为 实体类&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Content</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8049497962627482693L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String img;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.</strong> 最后实现的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(parseJD(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Content&gt; <span class="title function_">parseJD</span><span class="params">(String keywor  vbd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/// 使用前需要联网</span></span><br><span class="line"><span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=&quot;</span> + keyword;</span><br><span class="line"><span class="comment">// 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line"><span class="comment">// 使用document可以使用在js对document的所有操作</span></span><br><span class="line"><span class="comment">// 2.获取元素（通过id）</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">j_goodsList</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line"><span class="comment">//j_goodsList 如果这里为空   用下面这个方法</span></span><br><span class="line"><span class="comment">//Document document = Jsoup.connect(url).userAgent(&quot;Mozilla/5.0 (Windows NT 5.1; zh-CN) AppleWebKit/535.12 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/535.12&quot;).timeout(30000).get();</span></span><br><span class="line"><span class="comment">// 3.获取J_goodsList ul 每一个 li</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// System.out.println(lis);</span></span><br><span class="line"><span class="comment">// 4.获取li下的 img、price、name</span></span><br><span class="line"><span class="comment">// list存储所有li下的内容</span></span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Content&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element li : lis) &#123;</span><br><span class="line"><span class="comment">// 由于网站图片使用懒加载，将src属性替换为data-lazy-img</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> li.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);<span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"><span class="comment">// 封装为对象</span></span><br><span class="line">            <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Content</span>(name,img,price);</span><br><span class="line"><span class="comment">// 添加到list中</span></span><br><span class="line">            contents.add(content);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// System.out.println(contents);</span></span><br><span class="line"><span class="comment">// 5.返回 list</span></span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的使用</title>
      <link href="/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<img src="/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/nginx.jpg" class title="nginx"><h1 id="Nginx的使用"><a href="#Nginx的使用" class="headerlink" title="Nginx的使用"></a>Nginx的使用</h1><p><img src="https://www.it7a.com/wp-content/uploads/2020/11/nginx.png" alt="查看源图像"></p><blockquote><h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2></blockquote><p><em>Nginx</em> (engine x) 是一个高性能的$\color{blue}{HTTP和反向代理web服务器} $，</p><blockquote><h2 id="Nginx与Apache、Lighttpd-的综合对比"><a href="#Nginx与Apache、Lighttpd-的综合对比" class="headerlink" title="Nginx与Apache、Lighttpd 的综合对比"></a>Nginx与Apache、Lighttpd 的综合对比</h2></blockquote><p><img src="https://pic1.zhimg.com/80/v2-f2260990a67a26944086f384f6e9e434_720w.jpg" alt="img"></p><blockquote><h2 id="Nginx-的特点"><a href="#Nginx-的特点" class="headerlink" title="Nginx 的特点"></a>Nginx 的特点</h2></blockquote><p>高并发、高性能</p><p>可扩展性好</p><p>高可靠性</p><p>热部署</p><p>BSD许可证</p><blockquote><h2 id="Nginx-的下载"><a href="#Nginx-的下载" class="headerlink" title="Nginx 的下载"></a>Nginx 的下载</h2></blockquote><ul><li><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></li><li>下载解压后</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/72623c3cc893faee7d18f1b0946a936d.png" alt="img"></p><ul><li>启动Nginx<ol><li>直接双击<strong>nginx.exe</strong></li><li>在该目录中打开命令窗口（cmd），输入命令nginx.exe</li></ol></li></ul><p><img src="/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220522144325177.png" alt="image-20220522144325177"></p><p>​3.检查nginx是否启动成功，直接在浏览器地址输入  <a href="http://localhost/">http://localhost:80</a>  出现以下图片就证明启动成功！！！！！</p><p>​<img src="https://img-blog.csdnimg.cn/img_convert/681cf285ce268f21cc5353fb939c960d.png" alt="img"></p><ul><li>关闭nginx命令<ul><li>输入nginx命令 <code>nginx -s stop</code>(快速停止nginx) 或 <code>nginx -s quit</code>(完整有序的停止nginx)</li></ul></li></ul><blockquote><h2 id="负载均衡、反向代理的配置"><a href="#负载均衡、反向代理的配置" class="headerlink" title="负载均衡、反向代理的配置"></a>负载均衡、反向代理的配置</h2></blockquote><ul><li>负载均衡：就是把<strong>大量的请求</strong>$\color{blue}{按照我们指定的方式均衡的分配} $给<strong>集群中的每台服务器</strong>，从而不会产生集群中<strong>大量请求只请求某一台服务器</strong>，从而$\color{red}{使该服务器宕机的情况} $。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201102192514457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pwZjE4MTM3NjM2Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>负载均衡的配置语法：upstream xxx{} <strong>其中xxx 是可以随便起名字的</strong></li></ul><p><img src="/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220522145511138.png" alt="image-20220522145511138"></p><p><strong>也可以是 server localhost:8080；</strong></p><p><strong>其中 weight 是权重轮询</strong></p><ul><li>反向代理：实现负载均衡之前我们<strong>要先实现反向代理</strong>即请求到某个域名，默认该请求被nginx接收到，然后nginx根据配置，类似DNS解析，nginx会$\color{blue}{根据配置把特定的请求转发到对应的服务器} $</li></ul><p><img src="https://img-blog.csdnimg.cn/20201102193429816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pwZjE4MTM3NjM2Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>反向代理的配置语法：proxy_pass http:&#x2F;&#x2F; xxx  <strong>这里的xxx对应负载均衡里的xxx</strong></li></ul><p><img src="/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220522150614638.png" alt="image-20220522150614638"></p><blockquote><h2 id="nginx配置访问本地静态资源"><a href="#nginx配置访问本地静态资源" class="headerlink" title="nginx配置访问本地静态资源"></a>nginx配置访问本地静态资源</h2></blockquote><p>正常情况下，双击exe启动文件后，访问localhost:80，nginx默认回去找到nginx的html下面的index.html</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU3MDU3OTYtMTIwNjEwNDc2OC5wbmc=" alt="img"></p><ul><li>第一种配置，使用本地绝对路径，将静态的html放到你的这个目录下，我这里的路径是：D:&#x2F;tools&#x2F;nginx&#x2F;2&#x2F;html1;</li></ul><p> 访问本地绝对路径下的静态html</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">#root html;</span><br><span class="line">root D:/tools/nginx/2/html1;</span><br><span class="line">index index.html index.htm;  # index 代表html文件的index.html作为首页。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在黑窗口:<strong>nginx -s reload</strong> 一下。</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU3NTA1NjktMjg5MDU0OTA3LnBuZw==" alt="img"></p><ul><li>为了$\color{red}{保证一定的安全性} $，也可以在访问的地址后<strong>拼接上一个字符串</strong>，比如我这里加了page,总体的配置如下，</li></ul><p>访问路径拼接 &#x2F;pages 访问本地绝绝对路径下的静态html</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /pages/ &#123;</span><br><span class="line">alias D:/tools/nginx/2/html1/;</span><br><span class="line">autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问，仍然可以访问到该目录下的html</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU4NDA2MDItMTg4MTc3OTQzMi5wbmc=" alt="img"></p><p>其中autoindex on; 的作用</p><ul><li>配置完<code>autoindex</code>服务后，启动<code>Nginx</code>，打开浏览器访问<code>autoindex</code>服务的<code>url</code>，如图所示</li></ul><p><img src="https://img-blog.csdnimg.cn/20210611202753510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5ODg4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>图片的访问：使用<strong>绝对路径进行访问</strong>，访问路径拼接 upload 访问本地绝对路径下的某图片</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /upload/ &#123;</span><br><span class="line">alias D:/tools/nginx/2/image1/;</span><br><span class="line">autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTA3ODA2LzIwMTkxMC85MDc4MDYtMjAxOTEwMTcwOTU5MzE0MjctMzQwMjIyMTY4LnBuZw==" alt="img"></p><blockquote><h2 id="nginx解决跨域问题"><a href="#nginx解决跨域问题" class="headerlink" title="nginx解决跨域问题"></a>nginx解决跨域问题</h2></blockquote><ul><li><p>什么是跨域：跨域，指的是浏览器<strong>不能执行其他网站的脚本</strong>。它是由浏览器的<strong>同源策略</strong>造成的，是浏览器施加的安全限制。</p></li><li><p>白话理解：就比如你刚刚登录了淘宝买了东西，但是你现在又点进去了另外一个网站，那么你现在的淘宝账户是属于登录状态，而并没有登出，所以你现在点进去的这个网站可以看到你的账户信息，并操作你的账户信息，这样子就很危险。</p></li><li><p>同源策略：同源策略，单说来就是同协议，同域名，同端口</p></li></ul><p><img src="https://pic2.zhimg.com/80/v2-31bfbd1f364b096d77cf94b277e48861_720w.jpg" alt="img"></p><ul><li><p>跨域事例：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9769d21f3b8b80898180b192eacb29ec.png" alt="img"></p></li><li><p>nginx解决跨域问题</p></li></ul><p><img src="/2022/05/22/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220522153334291.png" alt="image-20220522153334291"></p><ul><li><p>Java后端解决跨域问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：LionCity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020-12-21 13:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(-9999)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">extends</span> <span class="title class_">HttpFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域提供支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8387103310559517243L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> req.getHeader(HttpHeaders.ORIGIN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(origin))&#123;</span><br><span class="line">            <span class="comment">// ORIGIN 起源  允许origin访问您的资源</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);</span><br><span class="line">            <span class="comment">// HEADERS 请求头/标题</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, <span class="string">&quot;Origin, x-requested-with, Content-Type, Accept, Authorization&quot;</span>);</span><br><span class="line">           <span class="comment">// CREDENTIALS  凭证  是否支持跨域用户凭证</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="comment">// METHODS 请求方式   当前站点支持的跨域请求类型是什么</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, <span class="string">&quot;GET, POST, PUT, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">           <span class="comment">// _EXPOSE_HEADERS 暴露标题  让客户端可以访问到其他的首部信息</span></span><br><span class="line">            <span class="comment">//  在客户端就可以通过XMLHttpRequest对象的getResponseHeader 方法，获取到响应头（以下6个）字段的值</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, <span class="string">&quot;Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma&quot;</span>);</span><br><span class="line">            <span class="comment">// 最大的年限  超时时长</span></span><br><span class="line">            res.addHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, <span class="string">&quot;60&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.doFilter(req, res, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><h2 id="nginx缓存"><a href="#nginx缓存" class="headerlink" title="nginx缓存"></a>nginx缓存</h2></blockquote><ul><li>什么时nginx的缓存：<strong>利用请求的局部性原理，下次访问不再连接后端服务器</strong></li></ul><p><img src="https://images2017.cnblogs.com/blog/1204916/201711/1204916-20171111201426653-2073877684.png" alt="img"></p><ul><li><p>nginx<strong>实现缓存</strong>是通过代理缓存  <strong>pxory_cache</strong>  这也是<code>ngx_http_proxy_module</code>模块提供的功能， 这里配置选项较多， 常用的选项有： <code>proxy_cache_path</code>、 <code>proxy_cache</code>和<code>proxy_cache_valid</code>。</p><ul><li><p>proxy_cache_path 定义一个<strong>完整的缓存空间</strong>，指定缓存数据的磁盘路径、索引存放的内存空间以及一些其他参数，如缓存删除策略。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_path /data/cache levels=1:2 keys_zone=web:10m max_size=1G inactive=10;　　　//缓存数据存储在/data/cache目录中</span><br></pre></td></tr></table></figure><ul><li>&#96;&#96;&#96;xml<br>levels：配置在该目录下再分两层目录，一层1个随机字符作为名称，二层2个随机字符作为名称，levels最多三层，每层最多两个字符，这是为了加快访问文件的速度；最后使用代理url的哈希值作为关键字与文件名，一个缓存数据如下： &#x2F;data&#x2F;nginx&#x2F;cache&#x2F;c&#x2F;29&#x2F;b7f54b2df7773722d382f4809d65029c;<br>keys_zone：用来为这个缓存区起名，并设置大小。上面的例子就是指定名称为web，这个名称后面proxy_cache需要引用；而10m就是内存空间的大小；<br>max_size：指定最大缓存数据磁盘空间的大小；<br>inactive：在inactive指定的时间内，未被访问的缓存数据将从缓存中删除 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `proxy_cache`用来引用上面`proxy_cache_path`定义的缓存空间， 现时打开缓存功能， 如下：</span><br><span class="line"></span><br><span class="line">```conf</span><br><span class="line">　　proxy_cache web；             //引用上面定义上的缓存空间， 同一缓存空间可以在几个地方使用</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>　<code>proxy_cache_valid</code>设置不同响应代码的缓存时间， 如：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m;</span><br></pre></td></tr></table></figure><ul><li><strong>配置nginx缓存实例</strong></li></ul><p>先配置<code>proxy_cache_path</code>，再配置<code>proxy_cache</code>引用、打开缓存空间，接着配置两个<code>proxy_cache_valid</code></p><p>定义一个完整的缓存空间；<strong>缓存数据存储在&#x2F;data&#x2F;cache目录中</strong>；配置在该目录下再分两层目录；名称为web(proxy_cache引用)；10m内存空间大小；最大缓存数据磁盘空间的大小；10分钟未被访问的缓存数据将从缓存中删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">proxy_cache_path /data/cache levels=1:2 keys_zone=web:10m max_size=1G inactive=10m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line">#charset koi8-r;</span><br><span class="line">#access_log logs/host.access.log main;</span><br><span class="line">add_header Magedu-Cache &quot;$upstream_cache_status form $server_addr&quot;;　　　　//给请求响应增加一个头部信息，表示从服务器上返回的cache状态怎么样（有没有命中）</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://webserver;　　　　//引用上面定义的upstream负载均衡组</span><br><span class="line">proxy_cache web;　　　　//引用上面定义上的缓存空间，同一缓存空间可以在几个地方使用</span><br><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m;　　　　//对代码200和302的响应设置10分钟的缓存，对代码404的响应设置为1分钟;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后献上ngxin的配置"><a href="#最后献上ngxin的配置" class="headerlink" title="最后献上ngxin的配置"></a>最后献上ngxin的配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">upstream ting&#123;</span><br><span class="line">// 负载均衡配置</span><br><span class="line">server 127.0.0.1.8080 weight=1 # 加权重轮询</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;  # 如果访问80端口根目录请求，就会走到 location / 下的配置中反向代理的地址</span><br><span class="line">// 代理</span><br><span class="line">location / &#123;</span><br><span class="line"> root   html; #访问的资源目录</span><br><span class="line">         index  index.html index.htm; #访问的资源名称</span><br><span class="line"># 允许跨域请求的“域”</span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; $http_origin;  #$http_origin 可以改为要跨域访问 ting这个端口的服务 比如：http:localhost:8080 要跨域访问ting这个服务</span><br><span class="line"># 允许客户端提交Cookie</span><br><span class="line">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line"># 允许客户端的请求方法</span><br><span class="line">add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS, DELETE, PUT&#x27;;</span><br><span class="line"># 允许客户端提交的的请求头</span><br><span class="line">add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Origin, x-requested-with, Content-Type, Accept, Authorization&#x27;;</span><br><span class="line"># 允许客户端访问的响应头</span><br><span class="line">add_header &#x27;Access-Control-Expose-Headers&#x27; &#x27;Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma&#x27;;</span><br><span class="line"># 处理预检请求</span><br><span class="line">if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line"># 预检请求缓存时间</span><br><span class="line">add_header &#x27;Access-Control-Max-Age&#x27; 1728000;</span><br><span class="line">add_header &#x27;Content-Type&#x27; &#x27;text/plain; charset=utf-8&#x27;;</span><br><span class="line">add_header &#x27;Content-Length&#x27; 0;</span><br><span class="line">return 204;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass http://ting  # 访问80端口会跳到这里</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><blockquote><p>抽象工厂模式是一种 <strong>创建型设计模式</strong>，它能创建一系列相关的对象，<strong>而无需指定其具体类</strong></p></blockquote><ul><li>图例：</li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/abstract-factory/abstract-factory-zh.png" alt="抽象工厂模式"></p><ul><li><p>详解：</p><ul><li><p>抽象工厂模式建议为系列中的每件产品明确声明接口 （例如椅子、 沙发或咖啡桌）。 然后， 确保所有产品变体都继承这些接口。 例如， <strong>所有风格的椅子</strong>都实现<strong>椅子</strong>接口； 所有**风格的咖啡桌都实现 <code>咖啡桌</code>**接口， 以此类推。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/solution1.png" alt="椅子类的层次结构"></p></li><li><p>接下来，我们需要声明抽象工厂所包含产品构造方法的接口，例如 $\color{Orange}{create­Chair创建椅子} $ ，$\color{Blue}{create­Sofa创建沙发} $ 和 $\color{RedOrange}{create­Coffee­Table创建咖啡桌} $</p></li></ul><p>这些方法必须返回<strong>抽象</strong>产品类型，即我们之前抽取的那些接口：  椅子，沙发和 咖啡桌等等。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/solution2.png" alt="工厂类的层次结构"></p><ul><li>对于那些产品变体情况下，我们都将基于 <code>抽象工厂</code>接口创建不同的工厂类。 每个工厂类都只能返回特定类别的产品， 例如，$\color{Orange}{create­Chair创建椅子} $**Modern­Furniture­Factory **只能创建 现代椅子Modern­Chair 、现代沙发Modern­Sofa、和现代咖啡桌Modern­Coffee­Table对象</li></ul></li><li><p>抽象工厂模式示意图</p><p><img src="https://img2018.cnblogs.com/blog/1479152/201904/1479152-20190425184143964-144789045.png" alt="img"></p></li><li><p>代码实现：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaApple</span> <span class="keyword">extends</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中国的苹果...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FruitFactory</span> &#123;</span><br><span class="line">    <span class="comment">//实例化苹果</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getApple</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//实例化香蕉</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getBanana</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaFactory</span> <span class="keyword">implements</span> <span class="title class_">FruitFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getApple</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChinaApple</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getBanana</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChinaBanana</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建中国工厂</span></span><br><span class="line">        <span class="type">FruitFactory</span> <span class="variable">chinaFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChinaFactory</span>();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国苹果实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> chinaFactory.getApple();</span><br><span class="line">        apple.get();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国香蕉实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> chinaFactory.getBanana();</span><br><span class="line">        banana.get();        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建英国工厂</span></span><br><span class="line">        <span class="type">FruitFactory</span> <span class="variable">englandFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnglandFactory</span>();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国苹果实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">apple1</span> <span class="operator">=</span> englandFactory.getApple();</span><br><span class="line">        apple1.get();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国香蕉实例</span></span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">banana2</span> <span class="operator">=</span> englandFactory.getBanana();</span><br><span class="line">        banana2.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1479152/201904/1479152-20190425184505372-571982803.png" alt="img"></p><blockquote><h2 id="抽象工厂模式适合应用场景"><a href="#抽象工厂模式适合应用场景" class="headerlink" title="抽象工厂模式适合应用场景"></a>抽象工厂模式适合应用场景</h2></blockquote><p>如果代码需要与$\color{Blue}{多个不同系列} $ 的相关产品<strong>交互</strong>，但是由于无法提前获取相关信息，或者处于对未来扩展性的考虑，你不希望代码基于产品的具体类进行构建，在这种情况下，你可以使用 <strong>抽象工厂</strong></p><blockquote><h2 id="抽象工厂模式优缺点"><a href="#抽象工厂模式优缺点" class="headerlink" title="抽象工厂模式优缺点"></a>抽象工厂模式优缺点</h2></blockquote><p>优点：</p><ul><li>你可以确保同一工厂生成的产品相互匹配。</li><li>你可以避免客户端和具体产品代码的耦合。</li><li><em>单一职责原则</em>。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</li><li><em>开闭原则</em>。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</li></ul><p>缺点：</p><p> 由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><blockquote><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p></blockquote><ul><li><p>图列</p><p><img src="https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png" alt="工厂方法模式"></p></li><li><p>问题：</p></li></ul><p>假设你正在开发一款物流管理应用。 最初版本只能处理卡车运输， 因此大部分代码<strong>都在位于</strong>名为卡车的类中。</p><p>如果代码其余部分与现有类已经存在$\color{Mahogany}{耦合关系} $， 那么向程序中<strong>添加新类</strong>其实并没有那么容易。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/problem1-zh.png" alt="在程序中新增一个运输类会遇到问题"></p><ul><li>解决方案：</li></ul><p>工厂方法模式建议使用<strong>特殊的<em>工厂</em>方法</strong>代替对于对象构造函数的直接调用 （即使用 <code>new</code>运算符）。不用担心， 对象仍将通过 <code>new</code>运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/solution1.png" alt="创建者类结构"></p><div align="center">子类可以修改工厂方法返回的对象类型。</div><ul><li><p>详解：</p><p>$\color{Mahogany}{卡车Truck}$和$\color{BrickRed}{轮船Ship类}$ <strong>都必须实现</strong>$\color{OrangeRed}{运输Transport接口}$，该接口<strong>声明</strong>了一个<strong>名</strong>为 $\color{OrangeRed}{deliver交付的方法}$。 每个类都将以不同的方式实现该方法： 卡车走陆路交付货物， 轮船走海路交付货物。 陆路运输Road­Logistics类中的工厂方法返回卡车对象，而海路运输Sea­Logistics类则返回轮船对象。</p></li></ul><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/solution3-zh.png" alt="使用工厂方法模式后的代码结构"></p><div align="center">只要产品类实现一个共同的接口， 你就可以将其对象传递给客户代码， 而无需提供额外数据</div><ul><li><p>结构</p><p><img src="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Typora\typora-user-images\image-20220515201231402.png" alt="image-20220515201231402"></p></li><li><p>代码实现：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//雷锋 （1）抽象产品角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LeiFeng</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Sweep</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Wash</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuyRice</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//社区志愿者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Volunteer</span> <span class="keyword">extends</span> <span class="title class_">LeiFeng</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Sweep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;社区志愿者帮忙打扫   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Wash</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;社区志愿者帮忙洗衣服   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuyRice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;社区志愿者帮忙买米   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//大学生  （2）具体产品角色：</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Undergraduate</span> <span class="keyword">extends</span> <span class="title class_">LeiFeng</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Sweep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;大学生帮忙打扫   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Wash</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;大学生帮忙洗衣服   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuyRice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;大学生帮忙买米   &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//雷锋工厂  （3）抽象工厂角色：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">LeiFeng <span class="title function_">CreateLeiFeng</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//社区志愿者工厂  （4）具体工厂角色：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolunteerFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> LeiFeng <span class="title function_">CreateLeiFeng</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Volunteer</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//学雷锋的大学生工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UndergraduateFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> LeiFeng <span class="title function_">CreateLeiFeng</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Undergraduate</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> FactoryMethodPattern;</span><br><span class="line"> <span class="comment">// 客户端测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//要换成&#x27;社区志愿者&#x27;，修改这里就可以</span></span><br><span class="line"><span class="type">IFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndergraduateFactory</span>();</span><br><span class="line"><span class="type">LeiFeng</span> <span class="variable">student</span> <span class="operator">=</span> factory.CreateLeiFeng();</span><br><span class="line"></span><br><span class="line">student.Sweep();</span><br><span class="line">student.Wash();</span><br><span class="line">student.BuyRice();</span><br><span class="line">System.out.println(<span class="string">&quot;\n --------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">IFactory</span> <span class="variable">factory2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolunteerFactory</span>();</span><br><span class="line"><span class="type">LeiFeng</span> <span class="variable">volunteer</span> <span class="operator">=</span> factory2.CreateLeiFeng();</span><br><span class="line"></span><br><span class="line">volunteer.Sweep();</span><br><span class="line">volunteer.Wash();</span><br><span class="line">volunteer.BuyRice();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180528135401854?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTg4NjMw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><blockquote><h2 id="工厂方法模式适合应用场景"><a href="#工厂方法模式适合应用场景" class="headerlink" title="工厂方法模式适合应用场景"></a>工厂方法模式适合应用场景</h2></blockquote><p>当你在编写代码的过程中，如果$\color{Red}{无法预知对象确切类别及其依赖关系}$时，可使用工厂方法</p><p>例如， 如果需要向应用中<strong>添加一种新产品，</strong> 你只需要开发新的创建者子类， 然后重写其工厂方法即可。</p><blockquote><h2 id="工厂方法模式优缺点"><a href="#工厂方法模式优缺点" class="headerlink" title="工厂方法模式优缺点"></a>工厂方法模式优缺点</h2></blockquote><p>优点:</p><ul><li>你可以避免创建者和具体产品之间的紧密耦合。</li><li><em>单一职责原则</em>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</li><li><em>开闭原则</em>。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</li></ul><p>缺点：</p><p>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</p><h2 id="生成器模式"><a href="#生成器模式" class="headerlink" title="生成器模式"></a>生成器模式</h2><blockquote><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p></blockquote><ul><li>图例：</li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/builder/builder-zh.png" alt="生成器设计模式"></p><ul><li><p>详解：</p><ul><li><p>该模式会将$\color{Red}{对象构造过程划分为一组}$步骤， 比如 $\color{Mahogany}{build­Walls创建墙壁}$和$\color{Mahogany}{ build­Door创建房门}$等。 每次创建对象时， 你都需要通过<strong>生成器对象</strong>执行一系列步骤。 <strong>重点</strong>在于你无需调用所有步骤， 而<strong>只需</strong>调用<strong>创建特定对象配置所需</strong>的那些步骤即可。</p></li><li><p>当你需要$\color{Red}{创建不同形式的产品}$时， 其中的一些构造步骤<strong>可能需要不同的实现</strong>。 例如， 木屋的房门可能需要使用木头制造， 而城堡的房门则必须使用石头制造。</p><p>在这种情况下， 你可以$\color{Red}{创建多个不同的生成器}$， $\color{YellowOrange}{用不同方式实现一组相同的创建步骤}$。 然后你就可以在创建过程中使用这些生成器 （例如按顺序调用多个构造步骤） 来生成不同类型的对象。</p></li></ul></li></ul><p><img src="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Typora\builder-comic-1-zh.png"></p><ul><li>例如， 假设<strong>第一个建造者</strong>使用木头和玻璃制造房屋， <strong>第二个建造者</strong>使用石头和钢铁， 而<strong>第三个建造者</strong>使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是，只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。<ul><li>你可以进一步将用于<strong>创建产品的一系列生成器步骤调用抽取</strong>成为 $\color{Mahogany}{单独的主管类}$。 主管类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</li></ul></li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/builder/builder-comic-2-zh.png" alt="img"></p><ul><li>生成器模式结构</li></ul><p><img src="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Typora\typora-user-images\image-20220515205018669.png" alt="image-20220515205018669"></p><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder.java</span></span><br><span class="line"><span class="comment"> *  建造者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">//地基</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidA</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//钢筋工程</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidB</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//铺电线</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidC</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//粉刷</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bulidD</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//完工-获取产品</span></span><br><span class="line">    <span class="keyword">abstract</span> Product <span class="title function_">getProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product.java</span></span><br><span class="line"><span class="comment"> *  产品（房子）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String buildA;</span><br><span class="line">    <span class="keyword">private</span> String buildB;</span><br><span class="line">    <span class="keyword">private</span> String buildC;</span><br><span class="line">    <span class="keyword">private</span> String buildD;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildA</span><span class="params">(String buildA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildA = buildA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildB</span><span class="params">(String buildB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildB = buildB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildC</span><span class="params">(String buildC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildC = buildC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBuildD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuildD</span><span class="params">(String buildD)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildD = buildD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> buildA+<span class="string">&quot;\n&quot;</span>+buildB+<span class="string">&quot;\n&quot;</span>+buildC+<span class="string">&quot;\n&quot;</span>+buildD+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;房子验收完成&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcreteBuilder.java</span></span><br><span class="line"><span class="comment"> *  具体建造者(工人)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        product = <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidA</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildA(<span class="string">&quot;地基&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidB</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildB(<span class="string">&quot;钢筋工程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidC</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildC(<span class="string">&quot;铺电线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bulidD</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBuildD(<span class="string">&quot;粉刷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Product <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Director.java</span></span><br><span class="line"><span class="comment"> *  指挥者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="comment">//指挥工人按顺序造房</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">create</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        builder.bulidA();</span><br><span class="line">        builder.bulidB();</span><br><span class="line">        builder.bulidC();</span><br><span class="line">        builder.bulidD();</span><br><span class="line">        <span class="keyword">return</span> builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test.java</span></span><br><span class="line"><span class="comment"> *  测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">create</span> <span class="operator">=</span> director.create(<span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>());</span><br><span class="line">        System.out.println(create.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12169865-20eeba8e5beb2069?imageMogr2/auto-orient/strip%7CimageView2/2/w/413/format/webp" alt="img"></p><blockquote><h2 id="生成器模式适合应用模式"><a href="#生成器模式适合应用模式" class="headerlink" title="生成器模式适合应用模式"></a>生成器模式适合应用模式</h2></blockquote><ul><li>使用生成器模式可避免<strong>“重叠构造函数”</strong>的出现</li><li>当你希望使用代码$\color{Peach}{创建不同形式的产品}$（例如石头或木头房屋）时，可使用生成器模式</li><li>使用生成器$\color{Peach}{构造组合树}$或其$\color{Peach}{他复杂对象}$</li></ul><blockquote><h2 id="生成器模式优缺点"><a href="#生成器模式优缺点" class="headerlink" title="生成器模式优缺点"></a>生成器模式优缺点</h2></blockquote><p>优点：</p><ul><li>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</li><li>生成不同形式的产品时， 你可以复用相同的制造代码。</li><li><em>单一职责原则</em>。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</li></ul><p>缺点：</p><p>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote><p><strong>原型模式</strong>是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p></blockquote><ul><li>图例：</li></ul><p><img src="https://refactoringguru.cn/images/patterns/content/prototype/prototype.png" alt="原型设计模式"></p><ul><li><p>详解：</p><p>如果你有一个对象， 并希望生成与其完全相同的一个复制品， 你该如何实现呢？ 首先， 你必须新建一个属于相同类的对象。 然后，你必须遍历原始对象的所有成员变量， 并将成员变量值复制到新对象中。</p><p>不错！ 但有个小问题。 并非所有对象都能通过这种方式进行复制， 因为有些对象$\color{Red}{可能拥有私有成员变量}$， <strong>它们在对象本身以外是不可见的</strong>。</p></li></ul><p><img src="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Typora\prototype-comic-1-zh.png"></p><ul><li><p>原型模式$\color{Red}{将克隆过程委派}$给<strong>被克隆</strong>的<strong>实际对象</strong>。 模式为所有支持克隆的对象声明了一个$\color{Melon}{通用接口}$，<strong>该接口让你能够克隆对象</strong>， 同时$\color{Red}{又无需将代码和对象所属类耦合}$。 通常情况下， 这样的接口中<strong>仅包含一个</strong> 克隆方法。</p><p>所有的类对克隆方法的实现都非常相似。 该方法会创建一个当前类的对象， 然后将原始对象所有的成员变量值复制到新建的类中。 你甚至可以复制私有成员变量， 因为绝大部分编程语言都允许对象访问其同类对象的私有成员变量。</p></li><li><p>其运作方式如下： $\color{Blue}{创建一系列不同类型的对象}$并<strong>不同的方式</strong>对其进行配置。 如果$\color{RubineRed}{所需对象与预先配置的对象}$<strong>相同</strong>， 那么你<strong>只需克隆原型</strong>即可， 无需新建一个对象。</p></li><li><p>原型模式结构</p></li></ul><p><img src="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Typora\typora-user-images\image-20220515212052687.png" alt="image-20220515212052687"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象原型角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prototype</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆自身的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个从自身克隆出来的对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Prototype <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *具体原型角色</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteProtype1</span> <span class="keyword">extends</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteProtype1</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype1</span>(<span class="built_in">this</span>.getId());</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteProtype2</span> <span class="keyword">extends</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteProtype2</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype2</span>(<span class="built_in">this</span>.getId());</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 客户端</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteProtype1</span> <span class="variable">protype1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype1</span>(<span class="string">&quot;Protype1&quot;</span>);</span><br><span class="line">        <span class="type">ConcreteProtype1</span> <span class="variable">protypeCopy1</span> <span class="operator">=</span> (ConcreteProtype1)protype1.clone();</span><br><span class="line">        System.out.println(protypeCopy1.getId());</span><br><span class="line">        System.err.println(protype1.toString());</span><br><span class="line">        System.err.println(protypeCopy1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">ConcreteProtype2</span> <span class="variable">protype2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProtype2</span>(<span class="string">&quot;Protype2&quot;</span>);</span><br><span class="line">        <span class="type">ConcreteProtype2</span> <span class="variable">protypeCopy2</span> <span class="operator">=</span> (ConcreteProtype2)protype2.clone();</span><br><span class="line">        System.out.println(protypeCopy2.getId());</span><br><span class="line">        System.err.println(protype2.toString());</span><br><span class="line">        System.err.println(protypeCopy2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  输出的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Protype1</span><br><span class="line">com.sschen.prototype.ConcreteProtype1@2a139a55</span><br><span class="line">com.sschen.prototype.ConcreteProtype1@15db9742</span><br><span class="line">Protype2</span><br><span class="line">com.sschen.prototype.ConcreteProtype2@6d06d69c</span><br><span class="line">com.sschen.prototype.ConcreteProtype2@<span class="number">7852e922</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="原型模式适合应用场景"><a href="#原型模式适合应用场景" class="headerlink" title="原型模式适合应用场景"></a>原型模式适合应用场景</h2></blockquote><ul><li>如果$\color{Blue}{你需要复制一些对象}$，同时又希望$\color{Blue}{代码独立于这些对象所属的具体类}$，可以使用原型模式</li><li>如果$\color{RubineRed}{子类的区别仅在于其他对象的初始化方式}$，那么你可以使用该模式<strong>来减少子类的数量</strong>，别人创建这些子类的目的<strong>可能为了创建特定类型的对象</strong>。</li></ul><blockquote><h2 id="原型模式的优缺点"><a href="#原型模式的优缺点" class="headerlink" title="原型模式的优缺点"></a>原型模式的优缺点</h2></blockquote><p>优点：</p><ul><li>你可以克隆对象， 而无需与它们所属的具体类相耦合。</li><li>你可以克隆预生成原型， 避免反复运行初始化代码。</li><li>你可以更方便地生成复杂对象。</li><li>你可以用继承以外的方式来处理复杂对象的不同配置。</li></ul><p>缺点：</p><p> 克隆包含循环引用的复杂对象可能会非常麻烦。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p></blockquote><ul><li><p>图例：</p><p><img src="https://refactoringguru.cn/images/patterns/content/singleton/singleton.png?id=108a0b9b5ea5c4426e0afa4504491d6f" alt="单例模式"></p></li><li><p>详解：</p><p><strong>保证一个类只有一个实例</strong>。 为什么会有人想要控制一个类所拥有的实例数量？ 最常见的原因是控制某些共享资源 （例如数据库或文件） 的访问权限</p><ul><li>运作方式是这样的：如果你创建了一个对象， 同时过一会儿后$\color{Blue}{你决定再创建一个新对象}$， 此时你会获得<strong>之前已创建的对象</strong>，$\color{RubineRed}{而不是一个新对象。}$</li></ul></li><li><p>单例模式结构</p></li></ul><p><img src="/2022/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Typora\typora-user-images\image-20220515214536764.png" alt="image-20220515214536764"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleObject</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      <span class="type">SingleObject</span> <span class="variable">object</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  输出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式之-—-gt-gt-gt-懒汉式，线程不安全"><a href="#单例模式之-—-gt-gt-gt-懒汉式，线程不安全" class="headerlink" title="单例模式之 —-&gt;&gt;&gt; 懒汉式，线程不安全"></a>单例模式之 —-&gt;&gt;&gt; 懒汉式，线程不安全</h2></blockquote><p>这种方式是<strong>最基本的实现方式</strong>，这种实现最大的问题$\color{RubineRed}{就是不支持多线程}$。因为<strong>没有加锁</strong>$\color{Red}{synchronized}$，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式之-—-gt-gt-gt-懒汉式，线程安全"><a href="#单例模式之-—-gt-gt-gt-懒汉式，线程安全" class="headerlink" title="单例模式之 —-&gt;&gt;&gt; 懒汉式，线程安全"></a>单例模式之 —-&gt;&gt;&gt; 懒汉式，线程安全</h2></blockquote><p>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，<strong>效率很低</strong>，99% 情况下不需要同步</p><ul><li>优点：第一次调用才初始化，避免内存浪费。</li><li>缺点：$\color{Red}{必须加锁synchronized}$才能<strong>保证单例</strong>，但加锁会影响效率。getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）</li></ul><blockquote><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式之-—-gt-gt-gt-饿汉式"><a href="#单例模式之-—-gt-gt-gt-饿汉式" class="headerlink" title="单例模式之 —-&gt;&gt;&gt;饿汉式"></a>单例模式之 —-&gt;&gt;&gt;饿汉式</h2></blockquote><p>这种方式比较常用，但容易产生垃圾对象。</p><ul><li>优点：没有加锁，执行效率会提高。</li><li>缺点：类加载时就初始化，浪费内存。</li></ul><blockquote><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单例模式适合应用场景"><a href="#单例模式适合应用场景" class="headerlink" title="单例模式适合应用场景"></a>单例模式适合应用场景</h2></blockquote><ul><li>如果程序中的<strong>某个类</strong>对于**所有客服端$\color{Red}{只有一个可用的实例}$**，可以使用单例模式</li><li>如果你需要**更加严格地$\color{Red}{控制全局变量}$**，可以使用单例模式</li></ul><blockquote><h2 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h2></blockquote><p>优点：</p><ul><li>你可以保证一个类只有一个实例。</li><li>你获得了一个指向该实例的<strong>全局访问节点</strong>。</li><li>仅在首次请求单例对象时对其进行初始化。</li></ul><p>缺点：</p><ul><li>违反了单一职责原则。 该模式同时解决了两个问题。</li><li>单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</li><li>该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</li><li>单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li></ul><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p> <strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p></blockquote><p><img src="L:/Typora/typora-user-images/adapter-zh.png" alt="adapter-zh"></p><ul><li><p>详解：<br>适配器模式通过$\color{Red}{封装对象}$将<strong>复杂</strong>的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。</p></li><li><p>运作方式：</p><ul><li>适配器实现与其中一个现有对象兼容的接口。</li><li>现有对象可以使用该接口安全地调用适配器方法。</li><li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li></ul></li><li><p>遇到的问题：</p></li></ul><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p><p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库<strong>只兼容 JSON 格式的数据。</strong></p><p><img src="L:/Typora/typora-user-images/problem-zh.png" alt="problem-zh"></p><ul><li><p>解决方案：</p><p>为了解决数据格式不兼容的问题， 你可以为分析函数库中的每个类创建将 <strong>XML 转换为 JSON 格式的适配器</strong>， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其$\color{Red}{传递给被封装分析对象的相应方法}$。</p></li><li><p>结构</p><p><strong>对象适配器：</strong></p><p>实现时使用了构成原则： 适配器实现了其中一个对象的接口， 并对另一个对象进行封装。 所有流行的编程语言都可以实现适配器。</p></li></ul><p><strong>类适配器</strong></p><p>这一实现使用了继承机制： 适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。</p><ul><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  适配器模式的意图是将一个已存在的类/接口进行复用,将其转换/具体化成客户希望的另外的一个类/接口。</span></span><br><span class="line"><span class="comment"> *  如何实例复用：</span></span><br><span class="line"><span class="comment"> *  将要进行复用的类，放到目标类的构造方法中，进行实例化，然后在目标类的相应方法中，进行调用，修改原来方法</span></span><br><span class="line"><span class="comment"> *  中的参数，或添加相应的逻辑。即复用了已有类的原来方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个电源适配器</span></span><br><span class="line">        <span class="type">VoltageAdapter</span> <span class="variable">voltageAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoltageAdapter</span>();</span><br><span class="line">        <span class="comment">//创建一个手机</span></span><br><span class="line">        <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mobile</span>(voltageAdapter);</span><br><span class="line">        <span class="comment">//充电</span></span><br><span class="line">        mobile.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个手机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mobile</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> V=<span class="number">220</span>; <span class="comment">//定义接入手机的电压为220伏</span></span><br><span class="line">    <span class="comment">//需要进入电源适配器 否则手机就炸了</span></span><br><span class="line">    <span class="keyword">private</span> VoltageAdapter voltageAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mobile</span><span class="params">(VoltageAdapter voltageAdapter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.voltageAdapter = voltageAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//手机充电</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用适配器方法以替换手机的充电方法</span></span><br><span class="line">        voltageAdapter.StepDownCharge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电源适配器 --降压</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VoltageAdapter</span>&#123;</span><br><span class="line">    <span class="comment">//降压充电 --额定充电</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">StepDownCharge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备充电...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;原始电压：&quot;</span> + Mobile.V + <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;经过变压器转换之后的电压:&quot;</span> + (Mobile.V - <span class="number">200</span>) + <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;快速充电中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="L:/Typora/typora-user-images/1394344-20181110172335244-524887957.png" alt="1394344-20181110172335244-524887957"></p></li></ul><blockquote><h2 id="适配器模式适合应用场景"><a href="#适配器模式适合应用场景" class="headerlink" title="适配器模式适合应用场景"></a>适配器模式适合应用场景</h2></blockquote><ul><li><p>当你希望使用某个类，但是$\color{Red}{其接口与其他代码不兼容时}$，可以使用适配器类</p></li><li><p>如果你需要$\color{Red}{复用这样一些类}$，他们<strong>处于同一个继承体系，</strong>并且他们又有了额外的<strong>一些共同方法</strong>，但是这些共同</p><p>方法不是所有在这一继承体系中的子类所具有的共性</p></li></ul><blockquote><h2 id="适配器模式优缺点"><a href="#适配器模式优缺点" class="headerlink" title="适配器模式优缺点"></a>适配器模式优缺点</h2></blockquote><p>优点：</p><ul><li>_单一职责原则_你可以将接口或数据转换代码从程序主要业务逻辑中分离。</li><li><em>开闭原则</em>。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</li></ul><p>缺点：</p><p>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</p><h2 id="适配器设计模式（封装器模式）-refactoringguru-cn"><a href="#适配器设计模式（封装器模式）-refactoringguru-cn" class="headerlink" title="适配器设计模式（封装器模式） (refactoringguru.cn)"></a><a href="https://refactoringguru.cn/design-patterns/adapter">适配器设计模式（封装器模式） (refactoringguru.cn)</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2022/05/22/jwt/"/>
      <url>/2022/05/22/jwt/</url>
      
        <content type="html"><![CDATA[<h1 id="Jwt"><a href="#Jwt" class="headerlink" title="Jwt"></a>Jwt</h1><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>Json web token (JWT), 是为了在<strong>网络应用环境间传递声明</strong>而执行的$\textcolor{red}{一种基于JSON}$的开放标准（<a href="https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为$\textcolor{red}{紧凑且安全}$的，特别适用于<strong>分布式站点的单点登录</strong>（SSO）场景。JWT的声明一般被用来在$\textcolor{red}{身份提供者和服务提供者间传递}$被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token <strong>也可直接被用于认证，也可被加密</strong></p><p>$\textcolor{red}{}$</p><h4 id="JWT的认证流程图"><a href="#JWT的认证流程图" class="headerlink" title="JWT的认证流程图"></a>JWT的认证流程图</h4><p><img src="/2022/05/22/jwt/Users\yuxua\AppData\Roaming\Typora\typora-user-images\image-20220514170059385.png" alt="image-20220514170059385"></p><p><img src="https://ask.qcloudimg.com/http-save/yehe-2874029/8qwls7hxns.png?imageView2/2/w/1620" alt="img"></p><blockquote><h2 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h2></blockquote><p>1，浏览器发起请求登陆，携带用户名和密码；</p><p>2，服务端验证身份，根据算法，将用户标识符打包生成 token, </p><p>3，服务器返回JWT信息给浏览器，JWT不包含敏感信息；</p><p>4，浏览器发起请求获取用户资料，把刚刚拿到的 token一起发送给服务器；</p><p>5，服务器发现数据中有 token，验明正身； </p><p>6，服务器返回该用户的用户资料；</p><h4 id="token与session的区别"><a href="#token与session的区别" class="headerlink" title="token与session的区别"></a>token与session的区别</h4><blockquote><p>session</p></blockquote><p><strong>Session是存放在服务器端的</strong>，可以保存在：内存、数据库、NoSQL中。它采用$\textcolor{red}{空间换时间的策略}$来进行身份识别，若Session没有持久化落地存储，一旦服务器重启，Session数据会丢失。</p><blockquote><p>token</p></blockquote><p><strong>Token是放在客户端存储的</strong>，采用了$\textcolor{red}{时间换空间策略}$，token类似一个<strong>令牌</strong>它<strong>也是无状态的</strong>，用户信息都被加密到token中，服务器收到token后解密就可知道是哪个用户。所以在分布式环境中应用广泛。</p><blockquote><p>适用场景</p></blockquote><p>一般购物车功能会采用Session验证，接口校验一般会采用Token验证，具体采用何种方法，需要大家根据自己的业务进行选择。</p><h4 id="JwtToken工具"><a href="#JwtToken工具" class="headerlink" title="JwtToken工具"></a>JwtToken工具</h4><blockquote><h3 id="配置yml文件"><a href="#配置yml文件" class="headerlink" title="配置yml文件"></a>配置yml文件</h3></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eshop:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">jwt-key:</span> <span class="string">eshopmini</span></span><br><span class="line">    <span class="attr">token-expired-in:</span> <span class="number">86400000</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JwtToken</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtToken</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer expiredTimeIn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">defaultScope</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eshop.security.jwt-key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtKey</span><span class="params">(String jwtKey)</span> &#123;</span><br><span class="line">        JwtToken.jwtKey = jwtKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eshop.security.token-expired-in&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpiredTimeIn</span><span class="params">(Integer expiredTimeIn)</span> &#123;</span><br><span class="line">        JwtToken.expiredTimeIn = expiredTimeIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取自定义数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Map&lt;String, Claim&gt;&gt; <span class="title function_">getClaims</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        DecodedJWT decodedJWT;</span><br><span class="line">        <span class="comment">// 指定算法</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(JwtToken.jwtKey); <span class="comment">// 编码</span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(decodedJWT.getClaims());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">verifyToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(JwtToken.jwtKey);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getExpireTime</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DateUtil.formatDateTime(JWT.decode(token).getExpiresAt()); <span class="comment">// 解码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeToken</span><span class="params">(Long uid,String uName, Integer scope)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JwtToken.getToken(uid,uName, scope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeToken</span><span class="params">(Long uid,String uName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JwtToken.getToken(uid,uName, JwtToken.defaultScope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取令牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Long uid,String uName, Integer scope)</span> &#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(JwtToken.jwtKey);</span><br><span class="line">        Map&lt;String,Date&gt; map = JwtToken.calculateExpiredIssues();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * withClaim(） 写入自定义数据</span></span><br><span class="line"><span class="comment">         * withExpiresAt() 设置过期时间</span></span><br><span class="line"><span class="comment">         * withIssuedAt() 设置当前时间</span></span><br><span class="line"><span class="comment">         * sign() 签名算法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;uid&quot;</span>, uid) <span class="comment">// payload 写入自定义数据</span></span><br><span class="line">                .withClaim(<span class="string">&quot;scope&quot;</span>, scope)</span><br><span class="line">                .withClaim(<span class="string">&quot;uName&quot;</span>, uName)</span><br><span class="line">                .withExpiresAt(map.get(<span class="string">&quot;expiredTime&quot;</span>))<span class="comment">//指定令牌过期时间</span></span><br><span class="line">                .withIssuedAt(map.get(<span class="string">&quot;now&quot;</span>)) <span class="comment">// 设置签发时间 即当前时间</span></span><br><span class="line">                .sign(algorithm);<span class="comment">//签名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Date&gt; <span class="title function_">calculateExpiredIssues</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Date&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取日历</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        calendar.add(Calendar.SECOND, JwtToken.expiredTimeIn);</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        map.put(<span class="string">&quot;now&quot;</span>, now);</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        map.put(<span class="string">&quot;expiredTime&quot;</span>, calendar.getTime());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="权限拦截器"><a href="#权限拦截器" class="headerlink" title="权限拦截器"></a>权限拦截器</h1><blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2></blockquote><p>拦截器 是在<strong>面向切面编程</strong>中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法。是基于JAVA的反射机制</p><blockquote><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2></blockquote><ul><li>请求到达 DispatcherServlet</li><li>DispatcherServlet 发送至 Interceptor ，执行 preHandle</li><li>请求达到 Controller</li><li>请求结束后，postHandle 执行</li></ul><blockquote><h2 id="拦截器和过滤器的执行顺序"><a href="#拦截器和过滤器的执行顺序" class="headerlink" title="拦截器和过滤器的执行顺序"></a>拦截器和过滤器的执行顺序</h2></blockquote><p>过滤前-&gt;拦截前-&gt;Action处理-&gt;拦截后-&gt;过滤后</p><blockquote><h2 id="自定义注解、自定义异常、用户权限、设置线程"><a href="#自定义注解、自定义异常、用户权限、设置线程" class="headerlink" title="自定义注解、自定义异常、用户权限、设置线程"></a>自定义注解、自定义异常、用户权限、设置线程</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eshop.api.ApiCode;</span><br><span class="line"><span class="keyword">import</span> com.eshop.api.UnAuthenticatedException;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.bean.LocalUser;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.util.JwtToken;</span><br><span class="line"><span class="keyword">import</span> com.eshop.constant.ShopConstants;</span><br><span class="line"><span class="keyword">import</span> com.eshop.modules.user.domain.ShopUser;</span><br><span class="line"><span class="keyword">import</span> com.eshop.modules.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.eshop.utils.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-04-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预处理preHandle()方法</span></span><br><span class="line"><span class="comment">     * 用户发送请求时，先执行preHandle()方法。会先按照顺序执行所有拦截器的preHandle方法，一直遇到return false为止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Optional&lt;AuthCheck&gt; authCheck = <span class="built_in">this</span>.getAuthCheck(handler);</span><br><span class="line">        <span class="keyword">if</span> (!authCheck.isPresent())&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 先获取服务端的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeader( <span class="string">&quot;Authorization&quot;</span> );</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty( bearerToken ))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取令牌前缀  防止信息伪造</span></span><br><span class="line">        <span class="keyword">if</span> (!bearerToken.startsWith(<span class="string">&quot;Bearer&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] tokens = bearerToken.split( <span class="string">&quot; &quot;</span> );</span><br><span class="line">        <span class="keyword">if</span>(!(tokens.length == <span class="number">2</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokens[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        Optional&lt;Map&lt;String, Claim&gt;&gt; optionalMap = JwtToken.getClaims( token );</span><br><span class="line">        <span class="comment">//orElseThrow：有token 就没有异常</span></span><br><span class="line">        Map&lt;String, Claim&gt; map = optionalMap.orElseThrow( () -&gt; <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>( ApiCode.UNAUTHORIZED ) );</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">uName</span> <span class="operator">=</span> map.get( <span class="string">&quot;uName&quot;</span> ).asString();</span><br><span class="line">        <span class="comment">// YSHOP_APP_LOGIN_USER= &quot;app-online-token:&quot;;  </span></span><br><span class="line">        <span class="keyword">if</span> (redisUtils.get(ShopConstants.YSHOP_APP_LOGIN_USER+uName+<span class="string">&quot;:&quot;</span>+token) == <span class="literal">null</span>)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.UNAUTHORIZED); <span class="comment">//  ApiCode 是自定义异常（enum） UNAUTHORIZED(401, &quot;非法访问&quot;),</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="built_in">this</span>.hasPermission(authCheck.get(),map);</span><br><span class="line">        <span class="keyword">if</span> (valid)&#123;</span><br><span class="line">            <span class="built_in">this</span>.setToThreadLocal(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setToThreadLocal</span><span class="params">(Map&lt;String, Claim&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> map.get( <span class="string">&quot;uid&quot;</span> ).asInt();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">scope</span> <span class="operator">=</span> map.get( <span class="string">&quot;scope&quot;</span> ).asInt();</span><br><span class="line">        <span class="type">ShopUser</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById( uid );</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.NOT_PERMISSION);   <span class="comment">// NOT_PERMISSION(403, &quot;没有权限&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line">        LocalUser.set(user,scope) ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        //设置用户，范围</span></span><br><span class="line"><span class="comment">        public static void set(ShopUser user, Integer scope) &#123;</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">        map.put(&quot;user&quot;, user);</span></span><br><span class="line"><span class="comment">        map.put(&quot;scope&quot;, scope);</span></span><br><span class="line"><span class="comment">        LocalUser.threadLocal.set(map);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authCheck</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(AuthCheck authCheck, Map&lt;String, Claim&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">level</span> <span class="operator">=</span> authCheck.value();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">scope</span> <span class="operator">=</span> map.get( <span class="string">&quot;scope&quot;</span> ).asInt();</span><br><span class="line">        <span class="keyword">if</span> (level &gt; scope)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnAuthenticatedException</span>(ApiCode.NOT_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Optional&lt;T&gt;是在java.util包下的一个用于代替null的一个工具类</span></span><br><span class="line"><span class="comment">     * 它是用于包装一个对象的</span></span><br><span class="line"><span class="comment">     * 当你要使用这个包装对象的时候，你要先问问Optional它包装的对象是不是null，是的话你就要小心空指针了，这就是Optional类的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;AuthCheck&gt; <span class="title function_">getAuthCheck</span><span class="params">(Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// instanceof 它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</span></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span>  HandlerMethod)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * HandlerMethod封装了很多属性，在访问请求方法的时候可以方便的访问到方法、方法参数、方法上的注解、所属类等并且对方法参数封装处理，</span></span><br><span class="line"><span class="comment">             * 也可以方便的访问到方法参数的注解等信息。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">            <span class="comment">// 获取方法上的注解</span></span><br><span class="line">            <span class="type">AuthCheck</span> <span class="variable">authCheck</span> <span class="operator">=</span> handlerMethod.getMethod().getAnnotation( AuthCheck.class );</span><br><span class="line">            <span class="keyword">if</span> (authCheck == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> Optional.empty();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(authCheck);  <span class="comment">// 如果指定的值为null，则此方法将引发NullPointerException。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> 自定义权限注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthCheck &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eshop.common.interceptor.PermissionInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> 注册拦截器配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.avatar&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String avatar;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将自己编写的拦截器注册进来</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerInterceptor <span class="title function_">getPermissionInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PermissionInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor( <span class="built_in">this</span>.getPermissionInterceptor() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">avatarUtl</span> <span class="operator">=</span> <span class="string">&quot;file:&quot;</span> + avatar.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pathUtl</span> <span class="operator">=</span> <span class="string">&quot;file:&quot;</span> + path.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 静态资源处理  addResourceLocations 指的是内部文件放置的目录  setCachePeriod 缓存期限</span></span><br><span class="line">        <span class="comment">// 意思就是,前端浏览器访问路径带有/file/**就转到对应磁盘下读取图片, </span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/avatar/**&quot;</span>).addResourceLocations(avatarUtl).setCachePeriod(<span class="number">0</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/file/**&quot;</span>).addResourceLocations(pathUtl).setCachePeriod(<span class="number">0</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>).setCachePeriod(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件存储路径</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\eshop\file\</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">D:\eshop\avatar\</span></span><br><span class="line">  <span class="comment"># 文件大小 /M</span></span><br><span class="line">  <span class="attr">maxSize:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">avatarMaxSize:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="Xss过滤器"><a href="#Xss过滤器" class="headerlink" title="Xss过滤器"></a>Xss过滤器</h1><blockquote><h2 id="定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序"><a href="#定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序" class="headerlink" title="定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序"></a>定义：跨站脚本攻击，XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序</h2></blockquote><blockquote><h2 id="配置-yml文件"><a href="#配置-yml文件" class="headerlink" title="配置 yml文件"></a>配置 yml文件</h2></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 防止XSS攻击</span></span><br><span class="line"><span class="attr">xss:</span> </span><br><span class="line">  <span class="comment"># 过滤开关</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 排除链接（多个用逗号分隔）</span></span><br><span class="line">  <span class="attr">excludes:</span></span><br><span class="line">  <span class="comment"># 匹配链接</span></span><br><span class="line">  <span class="attr">urlPatterns:</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="导依赖"><a href="#导依赖" class="headerlink" title="导依赖"></a>导依赖</h2></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="Escape工具-EscapeUtil"><a href="#Escape工具-EscapeUtil" class="headerlink" title="Escape工具-EscapeUtil"></a>Escape工具-EscapeUtil</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HTMLFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EscapeUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RE_HTML_MARK</span> <span class="operator">=</span> <span class="string">&quot;(&lt;[^&lt;]*?&gt;)|(&lt;[\\s]*?/[^&lt;]*?&gt;)|(&lt;[^&lt;]*?/[\\s]*?&gt;)&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[][] TEXT = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">64</span>][];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EscapeUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *Escape编码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">escape</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encode(text);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *Escape解码。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unescape</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">clean</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">HTMLFilter</span>()).filter(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> (text != <span class="literal">null</span> &amp;&amp; (len = text.length()) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(len + (len &gt;&gt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> text.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                    buffer.append(TEXT[c]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer.append(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> buffer.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decode</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(content)) &#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(content.length());</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(lastPos &lt; content.length()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> content.indexOf(<span class="string">&quot;%&quot;</span>, lastPos);</span><br><span class="line">                <span class="keyword">if</span> (pos == lastPos) &#123;</span><br><span class="line">                    <span class="type">char</span> ch;</span><br><span class="line">                    <span class="keyword">if</span> (content.charAt(pos + <span class="number">1</span>) == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                        ch = (<span class="type">char</span>)Integer.parseInt(content.substring(pos + <span class="number">2</span>, pos + <span class="number">6</span>), <span class="number">16</span>);</span><br><span class="line">                        tmp.append(ch);</span><br><span class="line">                        lastPos = pos + <span class="number">6</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ch = (<span class="type">char</span>)Integer.parseInt(content.substring(pos + <span class="number">1</span>, pos + <span class="number">3</span>), <span class="number">16</span>);</span><br><span class="line">                        tmp.append(ch);</span><br><span class="line">                        lastPos = pos + <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                    tmp.append(content.substring(lastPos));</span><br><span class="line">                    lastPos = content.length();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp.append(content.substring(lastPos, pos));</span><br><span class="line">                    lastPos = pos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tmp.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        System.out.println(clean(html));</span><br><span class="line">        System.out.println(escape(html));</span><br><span class="line">        System.out.println(unescape(html));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i) &#123;</span><br><span class="line">            TEXT[i] = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;(<span class="type">char</span>)i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TEXT[<span class="number">39</span>] = <span class="string">&quot;&amp;#039;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">34</span>] = <span class="string">&quot;&amp;#34;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">38</span>] = <span class="string">&quot;&amp;#38;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">60</span>] = <span class="string">&quot;&amp;#60;&quot;</span>.toCharArray();</span><br><span class="line">        TEXT[<span class="number">62</span>] = <span class="string">&quot;&amp;#62;&quot;</span>.toCharArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="xss过滤包装类"><a href="#xss过滤包装类" class="headerlink" title="xss过滤包装类"></a>xss过滤包装类</h2></blockquote><p>增加一个xssHttpServletRequestWrapper类,这个类重写了获取参数的方法，在获取参数时做了xss替换处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eshop.utils.html.EscapeUtil;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] values = <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> values.length;</span><br><span class="line">            String[] escapseValues = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">                <span class="comment">//过滤一切可能的xss攻击字符串</span></span><br><span class="line">                escapseValues[i] = EscapeUtil.clean(values[i]).trim();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> escapseValues;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="XssFilter过滤器"><a href="#XssFilter过滤器" class="headerlink" title="XssFilter过滤器"></a>XssFilter过滤器</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排除链接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; excludes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xss过滤开关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *filterConfig.getInitParameter 它能够访问部署描述符文件（web.xml）中分配的过滤器初始化参数。</span></span><br><span class="line"><span class="comment">        *简单来说 这个方法 能够读取yml配置文件</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tempExcludes</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;excludes&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tempEnabled</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">        <span class="comment">//将不需要xss过滤的接口添加到列表中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(tempExcludes)) &#123;</span><br><span class="line">            String[] url = tempExcludes.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; url != <span class="literal">null</span> &amp;&amp; i &lt; url.length; ++i) &#123;</span><br><span class="line">                <span class="built_in">this</span>.excludes.add(url[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(tempEnabled)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.enabled = Boolean.valueOf(tempEnabled);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest)request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse)response;</span><br><span class="line">        <span class="comment">//如果该访问接口在排除列表里面则不拦截</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.handleExcludeURL(req, resp)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//拦截该url并进行xss过滤</span></span><br><span class="line">            <span class="type">XssHttpServletRequestWrapper</span> <span class="variable">xssRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XssHttpServletRequestWrapper</span>((HttpServletRequest)request);</span><br><span class="line">            chain.doFilter(xssRequest, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleExcludeURL</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.enabled) &#123;</span><br><span class="line">            <span class="comment">//如果xss开关关闭了，则所有url都不拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.excludes != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.excludes.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.excludes.iterator();</span><br><span class="line"></span><br><span class="line">            Matcher m;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!var4.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> (String)var4.next();</span><br><span class="line">                <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^&quot;</span> + pattern);</span><br><span class="line">                m = p.matcher(url);</span><br><span class="line">            &#125; <span class="keyword">while</span>(!m.find());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="注册Bean过滤"><a href="#注册Bean过滤" class="headerlink" title="注册Bean过滤"></a>注册Bean过滤</h2></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.eshop.xss.XssFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Filter配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhonghui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有了 proxyBeanMethods 属性后，配置类不会被代理了。 主要是为了提高性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xss.enabled&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String enabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xss.excludes&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String excludes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//$&#123;&#125; 从配置文件中读取xss.urlPatterns的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xss.urlPatterns&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String urlPatterns;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用：告诉编译器忽略指定的警告，不用在编译完成后出现警告信息</span></span><br><span class="line"><span class="comment">     * 告诉编译器忽略 unchecked 警告信息，如使用List，ArrayList等未进行参数化产生的警告信息。</span></span><br><span class="line"><span class="comment">     * rawtypes 原始类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 注册bean过滤器</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">xssFilterRegistration</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        <span class="comment">// 设置分发器  分发器的类型为 请求</span></span><br><span class="line">        registration.setDispatcherTypes(DispatcherType.REQUEST);</span><br><span class="line">        <span class="comment">// 设置过滤器</span></span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">XssFilter</span>());</span><br><span class="line">        <span class="comment">// 设置 增加父网址 以 “,” 号分割</span></span><br><span class="line">        registration.addUrlPatterns(StrUtil.split(urlPatterns, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置过滤名字</span></span><br><span class="line">        registration.setName(<span class="string">&quot;xssFilter&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置顺序</span></span><br><span class="line">        registration.setOrder(Integer.MAX_VALUE);</span><br><span class="line">        <span class="comment">// 创建 map 命名为 初始化参数</span></span><br><span class="line">        Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(<span class="string">&quot;excludes&quot;</span>, excludes);</span><br><span class="line">        initParameters.put(<span class="string">&quot;enabled&quot;</span>, enabled);</span><br><span class="line">        <span class="comment">// 过滤器设置初始化参数 将其 initParameters 放入</span></span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        <span class="comment">// 并返回</span></span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>环境变量的配置</title>
      <link href="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h1><h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><ol><li><p>从官网下载 <strong>JDK1.8</strong> 版本的（注意，JDK版本不能太高，IDEA运行不起来） <a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a></p></li><li><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427170724531.png" alt="image-20220427170724531"><strong>在桌面选择此电脑，右键点击选择属性，选择高级系统设置</strong> 选择编辑环境变量</p></li><li><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427171204637.png" alt="image-20220427171204637"></p><p>设置变量名为：<strong>JAVA_HOME</strong>  变量值为：“你安装的JDK路径”</p></li><li><p>编辑PATH 点击新建，输入  **%JAVA_HOME%\bin ** <strong>%JAVA_HOME%\jre\bin</strong></p></li></ol><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427171753490.png" alt="image-20220427171753490"></p><p>5.测试 win+R 输入 <strong>cmd</strong>  输入 <strong>java</strong><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427171910684.png" alt="image-20220427171910684"></p><p><strong>javac</strong><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427171938343.png" alt="image-20220427171938343"></p><p><strong>java -version</strong></p><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427172007082.png" alt="image-20220427172007082"></p><p>配置成功</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ol><li>官网下载mysql <a href="https://www.mysql.com/">MySQL</a>  下载5.17的</li><li>打开环境变量，新建 <strong>MYSQL_HOME</strong> <strong>变量名</strong>  “mysql的安装路径” <strong>变量值</strong><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427191251233.png" alt="image-20220427191251233"></li></ol><p>3.编辑 path 新建  <strong>%MYSQL_HOME%\bin</strong> <img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427191406958.png" alt="image-20220427191406958"></p><p>4.<strong>新建my.ini文件</strong></p><ul><li>在你的<strong>mysql目录</strong>下<strong>新建 my.ini文件</strong></li><li>具体步骤：找到 MySQL解压的目录 → 新建文本文档 my.txt  → 输入以下内容 →  ctrl+s进行保存</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录 这块换成自己解压的路径</span><br><span class="line">basedir=D:\\mysql\\mysql-5.7.13-winx64</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p>5.以<strong>管理员身份</strong>进入 mysql目录下</p><ul><li><p><strong>输入<code>mysqld --initialize</code></strong>  此时，应该没有任何反应  mysqld –initialize 会帮助你创建data文件夹并初始化mysql, 因此<strong>不要</strong>自己创建data文件夹</p></li><li><p><strong>接着输入<code>mysqld -install </code></strong>  若出现Service successfully installed，证明安装成功  <strong>如</strong>出现<strong>Install of the Service Denied</strong>，则说明<strong>没有以管理员权限来运行cmd</strong></p></li><li><p><strong>再输入启动命令：<code>net start mysql</code></strong></p><p><img src="https://img-blog.csdnimg.cn/20200804210712347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTMzNzEx,size_16,color_FFFFFF,t_70" alt="img"></p></li></ul><p>6.修改密码  由于初始化产生的随机密码太复杂，不便于我们登录mysql，因此，我们应当修改一个自己能记住的密码！</p><ul><li><p><strong>首先停止MySQL服务,输入命令行<code>net stop mysql</code></strong> </p><p><img src="https://img-blog.csdnimg.cn/20200804211951813.png" alt="img"></p></li><li><p><strong>跳过密码登录</strong>  找到  <strong>my.ini文件 <strong>并打开  添加字段 在</strong>[mysqld]<strong>字段下任意一行添加 <strong>skip-grant-tables</strong>  （</strong>这一步可以省略</strong>）</p><p><img src="https://img-blog.csdnimg.cn/20200804213510212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTMzNzEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>打开cmd，输入<strong>net start mysql</strong>，启动mysql；启动成功之后设置密码(<strong>初始密码 —&gt; 一般是位空的</strong>)  输入命令  <strong>mysqladmin -u root -p password</strong> </p><ul><li>出现“<strong>Enter password：</strong>”，刚安装完时是默认没有密码的，直接回车即可</li><li>接着出现“<strong>New password：</strong>”输入新的密码，回车即可，</li><li>接着出现“<strong>Confirm new password:”</strong>确认密码，回车即可。</li></ul></li><li><p>或者 输入 <strong>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</strong></p></li></ul><ol start="7"><li><strong>检查 ：修改密码完之后 在控制台 登录</strong>   输入命令  <strong>mysql -u root -p</strong></li></ol><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>1.去官网下载 maven  3.8.5的版本</p><p>2.在maven目录下 新建文件夹  <strong>maven-repository</strong></p><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427194203399.png" alt="image-20220427194203399"></p><ol start="3"><li>打开 conf 里面的 <strong>settings.xml</strong>文件 在 <strong>55行</strong> 添加  <localRepository>L:\environment\apache-maven-3.8.5\maven-repository</localRepository>  添加的是 刚才创建的文件夹 <strong>maven-repository 目录</strong></li></ol><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427194510707.png" alt="image-20220427194510707"></p><ol start="4"><li>配置<strong>远程仓库</strong>  在 <strong>160行 添加 阿里云仓库</strong></li></ol><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427194656700.png" alt="image-20220427194656700"></p><ol start="5"><li><p><strong>配置环境变量</strong> </p><ul><li><p>新建 <strong>变量名</strong>为 <strong>M2_HOME</strong>  <strong>变量值</strong>：<strong>maven的bin目录</strong></p></li><li><p>新建 <strong>变量名</strong> 为 <strong>MAVEN_HOME</strong>  <strong>变量值</strong>：<strong>maven 的目录</strong></p><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427195049691.png" alt="image-20220427195049691"></p></li></ul></li><li><p>编辑 path 变量 新建 <strong>%MAVEN_HOME%\bin</strong></p><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427195147035.png" alt="image-20220427195147035"></p></li></ol><p>7.测试maven <strong>cmd</strong> 输入 <strong>mvn -version</strong></p><p><img src="/2022/05/22/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/Typora\typora-user-images\image-20220427195316067.png" alt="image-20220427195316067"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><blockquote><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2></blockquote><ul><li>初始化，创建本地仓库</li></ul><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520133526237.png" alt="image-20220520133526237"></p><blockquote><h2 id="初始化-命令：-git-init"><a href="#初始化-命令：-git-init" class="headerlink" title="初始化 命令： git init"></a>初始化 命令： git init</h2></blockquote><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520133610542.png" alt="image-20220520133610542"></p><ul><li>将本地文件添加到本地仓库</li></ul><blockquote><h2 id="添加本次仓库命令：-git-add"><a href="#添加本次仓库命令：-git-add" class="headerlink" title="添加本次仓库命令： git add ."></a>添加本次仓库命令： git add .</h2></blockquote><p><strong>注意 add 和 . 之间是有空格的</strong></p><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520133856100.png" alt="image-20220520133856100"></p><ul><li>添加注释  作用为提交暂存区的文件（也就是上一步添加的文件） 后面双引号内可以填写关于提交的注释信息。</li></ul><blockquote><h2 id="添加注释的命令：git-commit-m-“-“"><a href="#添加注释的命令：git-commit-m-“-“" class="headerlink" title="添加注释的命令：git commit -m “ “"></a>添加注释的命令：git commit -m “ “</h2></blockquote><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134130092.png" alt="image-20220520134130092"></p><ul><li>添加远程仓库，打开gitee 或者 github 新建仓库</li></ul><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134255675.png" alt="image-20220520134255675"></p><ul><li><p>建立本地仓库和远程仓库的关联</p><ul><li><p>复制新建仓库的地址</p><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134512013.png" alt="image-20220520134512013"></p></li></ul></li></ul><p><strong>关联</strong></p><blockquote><h2 id="关联的命令-git-remote-add-origin-后面是新建仓库的地址"><a href="#关联的命令-git-remote-add-origin-后面是新建仓库的地址" class="headerlink" title="关联的命令:  git remote add origin  后面是新建仓库的地址"></a>关联的命令:  git remote add origin  后面是新建仓库的地址</h2></blockquote><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134605087.png" alt="image-20220520134605087"></p><ul><li>同步仓库内容 本地仓库和远程仓库的内容是一样的</li></ul><blockquote><h2 id="同步仓库命令：git-pull-–rebase-origin-master"><a href="#同步仓库命令：git-pull-–rebase-origin-master" class="headerlink" title="同步仓库命令：git pull –rebase origin master"></a>同步仓库命令：git pull –rebase origin master</h2></blockquote><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134734791.png" alt="image-20220520134734791"></p><ul><li>上传文件</li></ul><blockquote><h2 id="上传命令：git-push-u-origin-master"><a href="#上传命令：git-push-u-origin-master" class="headerlink" title="上传命令：git push -u origin master"></a>上传命令：git push -u origin master</h2></blockquote><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134850683.png" alt="image-20220520134850683"></p><p>上传成功后看远程仓库</p><p><img src="/2022/05/22/git%E7%9A%84%E4%BD%BF%E7%94%A8/Typora\typora-user-images\image-20220520134945284.png" alt="image-20220520134945284"></p><ul><li>如果 git push -u origin master出错 如下图</li></ul><blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2></blockquote><ul><li>先输入命令 git pull –rebase origin master</li></ul><ul><li><p>再上传文件 命令： git push origin master</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/18/hello-world/"/>
      <url>/2022/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
